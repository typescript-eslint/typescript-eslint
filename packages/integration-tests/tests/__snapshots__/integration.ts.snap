// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`markdown it should produce the expected lint output 1`] = `
Array [
  Object {
    "errorCount": 10,
    "filePath": "__ROOT__/markdown/Doc.md",
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "messages": Array [
      Object {
        "column": 3,
        "endColumn": 14,
        "endLine": 8,
        "line": 8,
        "message": "Unexpected console statement.",
        "messageId": "unexpected",
        "nodeType": "MemberExpression",
        "ruleId": "no-console",
        "severity": 2,
      },
      Object {
        "column": 20,
        "endColumn": 23,
        "endLine": 26,
        "line": 26,
        "message": "Unexpected any. Specify a different type.",
        "messageId": "unexpectedAny",
        "nodeType": "TSAnyKeyword",
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "suggestions": Array [
          Object {
            "desc": "Use \`unknown\` instead, this will force you to explicitly, and safely assert the type is correct.",
            "fix": Object {
              "range": Array [
                51,
                54,
              ],
              "text": "unknown",
            },
            "messageId": "suggestUnknown",
          },
          Object {
            "desc": "Use \`never\` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",
            "fix": Object {
              "range": Array [
                51,
                54,
              ],
              "text": "never",
            },
            "messageId": "suggestNever",
          },
        ],
      },
      Object {
        "column": 3,
        "endColumn": 14,
        "endLine": 27,
        "line": 27,
        "message": "Unexpected console statement.",
        "messageId": "unexpected",
        "nodeType": "MemberExpression",
        "ruleId": "no-console",
        "severity": 2,
      },
      Object {
        "column": 3,
        "endColumn": 14,
        "endLine": 43,
        "line": 43,
        "message": "Unexpected console statement.",
        "messageId": "unexpected",
        "nodeType": "MemberExpression",
        "ruleId": "no-console",
        "severity": 2,
      },
      Object {
        "column": 17,
        "endColumn": 20,
        "endLine": 50,
        "line": 50,
        "message": "Unexpected any. Specify a different type.",
        "messageId": "unexpectedAny",
        "nodeType": "TSAnyKeyword",
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "suggestions": Array [
          Object {
            "desc": "Use \`unknown\` instead, this will force you to explicitly, and safely assert the type is correct.",
            "fix": Object {
              "range": Array [
                16,
                19,
              ],
              "text": "unknown",
            },
            "messageId": "suggestUnknown",
          },
          Object {
            "desc": "Use \`never\` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",
            "fix": Object {
              "range": Array [
                16,
                19,
              ],
              "text": "never",
            },
            "messageId": "suggestNever",
          },
        ],
      },
      Object {
        "column": 3,
        "endColumn": 14,
        "endLine": 51,
        "line": 51,
        "message": "Unexpected console statement.",
        "messageId": "unexpected",
        "nodeType": "MemberExpression",
        "ruleId": "no-console",
        "severity": 2,
      },
      Object {
        "column": 17,
        "endColumn": 20,
        "endLine": 59,
        "line": 59,
        "message": "Unexpected any. Specify a different type.",
        "messageId": "unexpectedAny",
        "nodeType": "TSAnyKeyword",
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "suggestions": Array [
          Object {
            "desc": "Use \`unknown\` instead, this will force you to explicitly, and safely assert the type is correct.",
            "fix": Object {
              "range": Array [
                16,
                19,
              ],
              "text": "unknown",
            },
            "messageId": "suggestUnknown",
          },
          Object {
            "desc": "Use \`never\` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",
            "fix": Object {
              "range": Array [
                16,
                19,
              ],
              "text": "never",
            },
            "messageId": "suggestNever",
          },
        ],
      },
      Object {
        "column": 3,
        "endColumn": 14,
        "endLine": 60,
        "line": 60,
        "message": "Unexpected console statement.",
        "messageId": "unexpected",
        "nodeType": "MemberExpression",
        "ruleId": "no-console",
        "severity": 2,
      },
      Object {
        "column": 17,
        "endColumn": 20,
        "endLine": 68,
        "line": 68,
        "message": "Unexpected any. Specify a different type.",
        "messageId": "unexpectedAny",
        "nodeType": "TSAnyKeyword",
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "suggestions": Array [
          Object {
            "desc": "Use \`unknown\` instead, this will force you to explicitly, and safely assert the type is correct.",
            "fix": Object {
              "range": Array [
                16,
                19,
              ],
              "text": "unknown",
            },
            "messageId": "suggestUnknown",
          },
          Object {
            "desc": "Use \`never\` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",
            "fix": Object {
              "range": Array [
                16,
                19,
              ],
              "text": "never",
            },
            "messageId": "suggestNever",
          },
        ],
      },
      Object {
        "column": 3,
        "endColumn": 14,
        "endLine": 69,
        "line": 69,
        "message": "Unexpected console statement.",
        "messageId": "unexpected",
        "nodeType": "MemberExpression",
        "ruleId": "no-console",
        "severity": 2,
      },
    ],
    "source": "Some extra text to verify that the markdown plugin is ignoring anything that is not a code block.

expected no-console error:
\`\`\`jsx
import { Button } from 'antd';

function MyComp() {
  console.log('test');
  return (
    <div>
      <Button type=\\"primary\\">Primary</Button>
      <Button>Default</Button>
      <Button type=\\"dashed\\">Dashed</Button>
      <Button type=\\"danger\\">Danger</Button>
      <Button type=\\"link\\">Link</Button>
    </div>
  );
}
\`\`\`

expected no-explicit-any error:
expected no-console error:
\`\`\`jsx
import { Button } from 'antd';

function MyComp(): any {
  console.log('test');
  return (
    <div>
      <Button type=\\"primary\\">Primary</Button>
      <Button>Default</Button>
      <Button type=\\"dashed\\">Dashed</Button>
      <Button type=\\"danger\\">Danger</Button>
      <Button type=\\"link\\">Link</Button>
    </div>
  );
}
\`\`\`

expected no-console error:
\`\`\`js
function foo() {
  console.log('test');
}
\`\`\`

expected no-explicit-any error:
expected no-console error:
\`\`\`js
function foo(): any {
  console.log('test');
}
\`\`\`


expected no-explicit-any error:
expected no-console error:
\`\`\`javascript
function foo(): any {
  console.log('test');
}
\`\`\`


expected no-explicit-any error:
expected no-console error:
\`\`\`node
function foo(): any {
  console.log('test');
}
\`\`\`
",
    "warningCount": 0,
  },
]
`;

exports[`recommended-does-not-require-program it should produce the expected lint output 1`] = `
Array [
  Object {
    "errorCount": 1,
    "filePath": "__ROOT__/recommended-does-not-require-program/index.ts",
    "fixableErrorCount": 1,
    "fixableWarningCount": 0,
    "messages": Array [
      Object {
        "column": 1,
        "endColumn": 15,
        "endLine": 1,
        "fix": Object {
          "range": Array [
            0,
            3,
          ],
          "text": "let",
        },
        "line": 1,
        "message": "Unexpected var, use let or const instead.",
        "nodeType": "VariableDeclaration",
        "ruleId": "no-var",
        "severity": 2,
      },
      Object {
        "column": 5,
        "endColumn": 8,
        "endLine": 1,
        "line": 1,
        "message": "'foo' is assigned a value but never used.",
        "nodeType": "Identifier",
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
      },
    ],
    "source": "var foo = true
",
    "warningCount": 1,
  },
]
`;

exports[`typescript-and-tslint-plugins-together it should produce the expected lint output 1`] = `
Array [
  Object {
    "errorCount": 1,
    "filePath": "__ROOT__/typescript-and-tslint-plugins-together/index.ts",
    "fixableErrorCount": 1,
    "fixableWarningCount": 0,
    "messages": Array [
      Object {
        "column": 7,
        "endColumn": 13,
        "endLine": 1,
        "line": 1,
        "message": "'noSemi' is assigned a value but never used.",
        "nodeType": "Identifier",
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
      },
      Object {
        "column": 20,
        "endColumn": 20,
        "endLine": 1,
        "fix": Object {
          "range": Array [
            19,
            19,
          ],
          "text": ";",
        },
        "line": 1,
        "message": "Missing semicolon (tslint:semicolon)",
        "messageId": "failure",
        "nodeType": null,
        "ruleId": "@typescript-eslint/tslint/config",
        "severity": 2,
      },
    ],
    "source": "const noSemi = true
",
    "warningCount": 1,
  },
]
`;

exports[`vue-jsx it should produce the expected lint output 1`] = `
Array [
  Object {
    "errorCount": 1,
    "filePath": "__ROOT__/vue-jsx/Jsx.vue",
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "messages": Array [
      Object {
        "column": 17,
        "endColumn": 20,
        "endLine": 17,
        "line": 17,
        "message": "Unexpected any. Specify a different type.",
        "messageId": "unexpectedAny",
        "nodeType": "TSAnyKeyword",
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "suggestions": Array [
          Object {
            "desc": "Use \`unknown\` instead, this will force you to explicitly, and safely assert the type is correct.",
            "fix": Object {
              "range": Array [
                390,
                393,
              ],
              "text": "unknown",
            },
            "messageId": "suggestUnknown",
          },
          Object {
            "desc": "Use \`never\` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",
            "fix": Object {
              "range": Array [
                390,
                393,
              ],
              "text": "never",
            },
            "messageId": "suggestNever",
          },
        ],
      },
    ],
    "source": "<script lang=\\"tsx\\">
import Vue from 'vue'
import { mapMutations } from 'vuex'
import { Component } from 'vue-property-decorator'

@Component({
  created () {
    this.toggleHeader(false)
  },
  methods: {
    ...mapMutations('APP_SCOPE_NAME', ['toggleHeader'])
  }
})
export default class Jsx extends Vue {
  render (): JSX.Element {
    // expected error - no-explicit-any
    const path: any = '/';
    return (
      // An error occurred in the next line: \\"Parsing error: '>' expected.eslint\\"
      <div class=\\"mg-notFound\\">
        <div class=\\"fixed-center text-center\\">
          <p>
            img goes here
          </p>
          <p class=\\"text-faded\\">Sorry, nothing here...<strong>(404)</strong></p>
          <q-btn
            color=\\"secondary\\"
            style=\\"width:200px;\\"
            onClick={() => console.log(path)}
          >Go back</q-btn>
        </div>
      </div>
    )
  }
}
</script>
",
    "warningCount": 0,
  },
]
`;

exports[`vue-sfc it should produce the expected lint output 1`] = `
Array [
  Object {
    "errorCount": 1,
    "filePath": "__ROOT__/vue-jsx/Jsx.vue",
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "messages": Array [
      Object {
        "column": 17,
        "endColumn": 20,
        "endLine": 17,
        "line": 17,
        "message": "Unexpected any. Specify a different type.",
        "messageId": "unexpectedAny",
        "nodeType": "TSAnyKeyword",
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "suggestions": Array [
          Object {
            "desc": "Use \`unknown\` instead, this will force you to explicitly, and safely assert the type is correct.",
            "fix": Object {
              "range": Array [
                390,
                393,
              ],
              "text": "unknown",
            },
            "messageId": "suggestUnknown",
          },
          Object {
            "desc": "Use \`never\` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",
            "fix": Object {
              "range": Array [
                390,
                393,
              ],
              "text": "never",
            },
            "messageId": "suggestNever",
          },
        ],
      },
    ],
    "source": "<script lang=\\"tsx\\">
import Vue from 'vue'
import { mapMutations } from 'vuex'
import { Component } from 'vue-property-decorator'

@Component({
  created () {
    this.toggleHeader(false)
  },
  methods: {
    ...mapMutations('APP_SCOPE_NAME', ['toggleHeader'])
  }
})
export default class Jsx extends Vue {
  render (): JSX.Element {
    // expected error - no-explicit-any
    const path: any = '/';
    return (
      // An error occurred in the next line: \\"Parsing error: '>' expected.eslint\\"
      <div class=\\"mg-notFound\\">
        <div class=\\"fixed-center text-center\\">
          <p>
            img goes here
          </p>
          <p class=\\"text-faded\\">Sorry, nothing here...<strong>(404)</strong></p>
          <q-btn
            color=\\"secondary\\"
            style=\\"width:200px;\\"
            onClick={() => console.log(path)}
          >Go back</q-btn>
        </div>
      </div>
    )
  }
}
</script>
",
    "warningCount": 0,
  },
]
`;
