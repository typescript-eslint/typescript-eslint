// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`functions arrow scope 1`] = `
ScopeManager {
  variables: Array [
    Variable$1 {
      defs: Array [
        VariableDefinition$1 {
          name: Identifier<"arrow">,
          node: VariableDeclarator$1,
        },
      ],
      name: "arrow",
      references: Array [
        Reference$1 {
          identifier: Identifier<"arrow">,
          init: true,
          isTypeReference: false,
          isValueReference: true,
          resolved: Variable$1,
          writeExpr: ArrowFunctionExpression$2,
        },
      ],
      isValueVariable: true,
      isTypeVariable: false,
    },
    Variable$2 {
      defs: Array [
        VariableDefinition$2 {
          name: Identifier<"i">,
          node: VariableDeclarator$3,
        },
      ],
      name: "i",
      references: Array [
        Reference$2 {
          identifier: Identifier<"i">,
          init: true,
          isTypeReference: false,
          isValueReference: true,
          resolved: Variable$2,
          writeExpr: Literal$4,
        },
        Reference$4 {
          identifier: Identifier<"i">,
          isTypeReference: false,
          isValueReference: true,
          resolved: Variable$2,
        },
      ],
      isValueVariable: true,
      isTypeVariable: false,
    },
    Variable$3 {
      defs: Array [
        VariableDefinition$3 {
          name: Identifier<"j">,
          node: VariableDeclarator$5,
        },
      ],
      name: "j",
      references: Array [
        Reference$3 {
          identifier: Identifier<"j">,
          init: true,
          isTypeReference: false,
          isValueReference: true,
          resolved: Variable$3,
          writeExpr: Literal$6,
        },
      ],
      isValueVariable: true,
      isTypeVariable: false,
    },
    Variable$4 {
      defs: Array [
        VariableDefinition$4 {
          name: Identifier<"unresolved">,
          node: VariableDeclarator$7,
        },
      ],
      name: "unresolved",
      references: Array [
        Reference$5 {
          identifier: Identifier<"unresolved">,
          init: true,
          isTypeReference: false,
          isValueReference: true,
          resolved: Variable$4,
          writeExpr: Identifier<"j">,
        },
      ],
      isValueVariable: true,
      isTypeVariable: false,
    },
  ],
  scopes: Array [
    GlobalScope$1 {
      block: Program$8,
      isStrict: false,
      references: Array [
        Reference$1,
        Reference$5,
        Reference$6 {
          identifier: Identifier<"j">,
          isTypeReference: false,
          isValueReference: true,
          resolved: null,
        },
      ],
      set: Map {
        "arrow" => Variable$1,
        "unresolved" => Variable$4,
      },
      type: "global",
      upper: null,
      variables: Array [
        Variable$1,
        Variable$4,
      ],
    },
    FunctionScope$2 {
      block: ArrowFunctionExpression$2,
      isStrict: false,
      references: Array [
        Reference$2,
        Reference$3,
        Reference$4,
      ],
      set: Map {
        "i" => Variable$2,
        "j" => Variable$3,
      },
      type: "function",
      upper: GlobalScope$1,
      variables: Array [
        Variable$2,
        Variable$3,
      ],
    },
  ],
}
`;
