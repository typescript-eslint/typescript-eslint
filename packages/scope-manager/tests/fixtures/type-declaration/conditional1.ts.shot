// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`type-declaration conditional1 1`] = `
ScopeManager {
  variables: [
    ImplicitGlobalConstTypeVariable,
    Variable$2 {
      defs: [
        TypeDefinition$1 {
          name: Identifier<"T">,
          node: TSTypeAliasDeclaration$1,
        },
      ],
      name: "T",
      references: [],
      isValueVariable: false,
      isTypeVariable: true,
    },
    Variable$3 {
      defs: [
        TypeDefinition$2 {
          name: Identifier<"U">,
          node: TSTypeParameter$2,
        },
      ],
      name: "U",
      references: [
        Reference$1 {
          identifier: Identifier<"U">,
          isRead: true,
          isTypeReference: true,
          isValueReference: false,
          isWrite: false,
          resolved: Variable$3,
        },
      ],
      isValueVariable: false,
      isTypeVariable: true,
    },
    Variable$4 {
      defs: [
        TypeDefinition$3 {
          name: Identifier<"V">,
          node: TSTypeParameter$3,
        },
      ],
      name: "V",
      references: [
        Reference$2 {
          identifier: Identifier<"V">,
          isRead: true,
          isTypeReference: true,
          isValueReference: false,
          isWrite: false,
          resolved: Variable$4,
        },
      ],
      isValueVariable: false,
      isTypeVariable: true,
    },
    Variable$5 {
      defs: [
        TypeDefinition$4 {
          name: Identifier<"Unresolved">,
          node: TSTypeAliasDeclaration$4,
        },
      ],
      name: "Unresolved",
      references: [],
      isValueVariable: false,
      isTypeVariable: true,
    },
  ],
  scopes: [
    GlobalScope$1 {
      block: Program$5,
      isStrict: false,
      references: [
        Reference$3 {
          identifier: Identifier<"V">,
          isRead: true,
          isTypeReference: true,
          isValueReference: false,
          isWrite: false,
          resolved: null,
        },
      ],
      set: Map {
        "const" => ImplicitGlobalConstTypeVariable,
        "T" => Variable$2,
        "Unresolved" => Variable$5,
      },
      type: "global",
      upper: null,
      variables: [
        ImplicitGlobalConstTypeVariable,
        Variable$2,
        Variable$5,
      ],
    },
    TypeScope$2 {
      block: TSTypeAliasDeclaration$1,
      isStrict: true,
      references: [],
      set: Map {
        "U" => Variable$3,
      },
      type: "type",
      upper: GlobalScope$1,
      variables: [
        Variable$3,
      ],
    },
    ConditionalTypeScope$3 {
      block: TSConditionalType$6,
      isStrict: true,
      references: [
        Reference$1,
        Reference$2,
      ],
      set: Map {
        "V" => Variable$4,
      },
      type: "conditionalType",
      upper: TypeScope$2,
      variables: [
        Variable$4,
      ],
    },
  ],
}
`;
