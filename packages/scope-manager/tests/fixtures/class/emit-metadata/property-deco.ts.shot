// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`class emit-metadata property-deco 1`] = `
ScopeManager {
  variables: [
    ImplicitGlobalConstTypeVariable,
    Variable$2 {
      defs: [
        FunctionNameDefinition$1 {
          name: Identifier<"deco">,
          node: FunctionDeclaration$1,
        },
      ],
      name: "deco",
      references: [
        Reference$2 {
          identifier: Identifier<"deco">,
          isRead: true,
          isTypeReference: false,
          isValueReference: true,
          isWrite: false,
          resolved: Variable$2,
        },
      ],
      isValueVariable: true,
      isTypeVariable: false,
    },
    Variable$3 {
      defs: [],
      name: "arguments",
      references: [],
      isValueVariable: true,
      isTypeVariable: true,
    },
    Variable$4 {
      defs: [
        ParameterDefinition$2 {
          name: Identifier<"param">,
          node: FunctionDeclaration$1,
        },
      ],
      name: "param",
      references: [],
      isValueVariable: true,
      isTypeVariable: false,
    },
    Variable$5 {
      defs: [
        TSModuleNameDefinition$3 {
          name: Identifier<"a">,
          node: TSModuleDeclaration$2,
        },
      ],
      name: "a",
      references: [
        Reference$1 {
          identifier: Identifier<"a">,
          isRead: true,
          isTypeReference: true,
          isValueReference: false,
          isWrite: false,
          resolved: Variable$5,
        },
        Reference$3 {
          identifier: Identifier<"a">,
          isRead: true,
          isTypeReference: true,
          isValueReference: true,
          isWrite: false,
          resolved: Variable$5,
        },
      ],
      isValueVariable: true,
      isTypeVariable: true,
    },
    Variable$6 {
      defs: [
        ClassNameDefinition$4 {
          name: Identifier<"B">,
          node: ClassDeclaration$3,
        },
      ],
      name: "B",
      references: [],
      isValueVariable: true,
      isTypeVariable: true,
    },
    Variable$7 {
      defs: [
        ClassNameDefinition$5 {
          name: Identifier<"B">,
          node: ClassDeclaration$3,
        },
      ],
      name: "B",
      references: [],
      isValueVariable: true,
      isTypeVariable: true,
    },
    Variable$8 {
      defs: [
        ClassNameDefinition$6 {
          name: Identifier<"A">,
          node: ClassDeclaration$4,
        },
      ],
      name: "A",
      references: [],
      isValueVariable: true,
      isTypeVariable: true,
    },
    Variable$9 {
      defs: [
        ClassNameDefinition$7 {
          name: Identifier<"A">,
          node: ClassDeclaration$4,
        },
      ],
      name: "A",
      references: [],
      isValueVariable: true,
      isTypeVariable: true,
    },
  ],
  scopes: [
    GlobalScope$1 {
      block: Program$5,
      isStrict: false,
      references: [],
      set: Map {
        "const" => ImplicitGlobalConstTypeVariable,
        "deco" => Variable$2,
        "a" => Variable$5,
        "A" => Variable$8,
      },
      type: "global",
      upper: null,
      variables: [
        ImplicitGlobalConstTypeVariable,
        Variable$2,
        Variable$5,
        Variable$8,
      ],
    },
    FunctionScope$2 {
      block: FunctionDeclaration$1,
      isStrict: false,
      references: [],
      set: Map {
        "arguments" => Variable$3,
        "param" => Variable$4,
      },
      type: "function",
      upper: GlobalScope$1,
      variables: [
        Variable$3,
        Variable$4,
      ],
    },
    TSModuleScope$3 {
      block: TSModuleDeclaration$2,
      isStrict: true,
      references: [],
      set: Map {
        "B" => Variable$6,
      },
      type: "tsModule",
      upper: GlobalScope$1,
      variables: [
        Variable$6,
      ],
    },
    ClassScope$4 {
      block: ClassDeclaration$3,
      isStrict: true,
      references: [],
      set: Map {
        "B" => Variable$7,
      },
      type: "class",
      upper: TSModuleScope$3,
      variables: [
        Variable$7,
      ],
    },
    ClassScope$5 {
      block: ClassDeclaration$4,
      isStrict: true,
      references: [
        Reference$1,
        Reference$2,
        Reference$3,
      ],
      set: Map {
        "A" => Variable$9,
      },
      type: "class",
      upper: GlobalScope$1,
      variables: [
        Variable$9,
      ],
    },
  ],
}
`;
