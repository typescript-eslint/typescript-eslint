// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`catch scope 1`] = `
ScopeManager {
  variables: Array [
    ImplicitGlobalConstTypeVariable,
    Variable$2 {
      defs: Array [
        CatchClauseDefinition$1 {
          name: Identifier<"e">,
          node: CatchClause$1,
        },
      ],
      name: "e",
      references: Array [
        Reference$1 {
          identifier: Identifier<"e">,
          isRead: true,
          isTypeReference: false,
          isValueReference: true,
          isWrite: false,
          resolved: Variable$2,
        },
      ],
      isValueVariable: true,
      isTypeVariable: false,
    },
    Variable$3 {
      defs: Array [
        VariableDefinition$2 {
          name: Identifier<"a">,
          node: VariableDeclarator$2,
        },
      ],
      name: "a",
      references: Array [
        Reference$2 {
          identifier: Identifier<"a">,
          init: true,
          isRead: false,
          isTypeReference: false,
          isValueReference: true,
          isWrite: true,
          resolved: Variable$3,
          writeExpr: Literal$3,
        },
      ],
      isValueVariable: true,
      isTypeVariable: false,
    },
    Variable$4 {
      defs: Array [
        VariableDefinition$3 {
          name: Identifier<"unresolved">,
          node: VariableDeclarator$4,
        },
      ],
      name: "unresolved",
      references: Array [
        Reference$3 {
          identifier: Identifier<"unresolved">,
          init: true,
          isRead: false,
          isTypeReference: false,
          isValueReference: true,
          isWrite: true,
          resolved: Variable$4,
          writeExpr: Identifier<"e">,
        },
      ],
      isValueVariable: true,
      isTypeVariable: false,
    },
    Variable$5 {
      defs: Array [
        VariableDefinition$4 {
          name: Identifier<"dontReference2">,
          node: VariableDeclarator$5,
        },
      ],
      name: "dontReference2",
      references: Array [
        Reference$5 {
          identifier: Identifier<"dontReference2">,
          init: true,
          isRead: false,
          isTypeReference: false,
          isValueReference: true,
          isWrite: true,
          resolved: Variable$5,
          writeExpr: Identifier<"a">,
        },
      ],
      isValueVariable: true,
      isTypeVariable: false,
    },
  ],
  scopes: Array [
    GlobalScope$1 {
      block: Program$6,
      isStrict: false,
      references: Array [
        Reference$3,
        Reference$4 {
          identifier: Identifier<"e">,
          isRead: true,
          isTypeReference: false,
          isValueReference: true,
          isWrite: false,
          resolved: null,
        },
        Reference$5,
        Reference$6 {
          identifier: Identifier<"a">,
          isRead: true,
          isTypeReference: false,
          isValueReference: true,
          isWrite: false,
          resolved: null,
        },
      ],
      set: Map {
        "const" => ImplicitGlobalConstTypeVariable,
        "unresolved" => Variable$4,
        "dontReference2" => Variable$5,
      },
      type: "global",
      upper: null,
      variables: Array [
        ImplicitGlobalConstTypeVariable,
        Variable$4,
        Variable$5,
      ],
    },
    BlockScope$2 {
      block: BlockStatement$7,
      isStrict: false,
      references: Array [],
      set: Map {},
      type: "block",
      upper: GlobalScope$1,
      variables: Array [],
    },
    CatchScope$3 {
      block: CatchClause$1,
      isStrict: false,
      references: Array [],
      set: Map {
        "e" => Variable$2,
      },
      type: "catch",
      upper: GlobalScope$1,
      variables: Array [
        Variable$2,
      ],
    },
    BlockScope$4 {
      block: BlockStatement$8,
      isStrict: false,
      references: Array [
        Reference$1,
        Reference$2,
      ],
      set: Map {
        "a" => Variable$3,
      },
      type: "block",
      upper: CatchScope$3,
      variables: Array [
        Variable$3,
      ],
    },
  ],
}
`;
