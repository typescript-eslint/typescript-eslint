// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Validating rule docs prefer-nullish-coalescing.mdx code examples ESLint output 1`] = `
"Incorrect
Options: { "ignoreTernaryTests": false }

declare const a: any;
a !== undefined && a !== null ? a : 'a string';
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression, as it is simpler to read.
a === undefined || a === null ? 'a string' : a;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression, as it is simpler to read.
a == undefined ? 'a string' : a;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression, as it is simpler to read.
a == null ? 'a string' : a;
~~~~~~~~~~~~~~~~~~~~~~~~~~ Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression, as it is simpler to read.

declare const b: string | undefined;
b !== undefined ? b : 'a string';
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression, as it is simpler to read.
b === undefined ? 'a string' : b;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression, as it is simpler to read.
b ? b : 'a string';
~~~~~~~~~~~~~~~~~~ Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression, as it is simpler to read.
!b ? 'a string' : b;
~~~~~~~~~~~~~~~~~~~ Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression, as it is simpler to read.

declare const c: string | null;
c !== null ? c : 'a string';
~~~~~~~~~~~~~~~~~~~~~~~~~~~ Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression, as it is simpler to read.
c === null ? 'a string' : c;
~~~~~~~~~~~~~~~~~~~~~~~~~~~ Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression, as it is simpler to read.
c ? c : 'a string';
~~~~~~~~~~~~~~~~~~ Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression, as it is simpler to read.
!c ? 'a string' : c;
~~~~~~~~~~~~~~~~~~~ Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression, as it is simpler to read.
"
`;

exports[`Validating rule docs prefer-nullish-coalescing.mdx code examples ESLint output 2`] = `
"Correct
Options: { "ignoreTernaryTests": false }

declare const a: any;
a ?? 'a string';

declare const b: string | undefined;
b ?? 'a string';

declare const c: string | null;
c ?? 'a string';
"
`;

exports[`Validating rule docs prefer-nullish-coalescing.mdx code examples ESLint output 3`] = `
"Incorrect
Options: { "ignoreConditionalTests": false }

declare const a: string | null;
declare const b: string | null;

if (a || b) {
      ~~ Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.
}
if ((a ||= b)) {
}
while (a || b) {}
         ~~ Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.
while ((a ||= b)) {}
do {} while (a || b);
               ~~ Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.
for (let i = 0; a || b; i += 1) {}
                  ~~ Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.
a || b ? true : false;
  ~~ Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.
"
`;

exports[`Validating rule docs prefer-nullish-coalescing.mdx code examples ESLint output 4`] = `
"Correct
Options: { "ignoreConditionalTests": false }

declare const a: string | null;
declare const b: string | null;

if (a ?? b) {
}
if ((a ??= b)) {
}
while (a ?? b) {}
while ((a ??= b)) {}
do {} while (a ?? b);
for (let i = 0; a ?? b; i += 1) {}
(a ?? b) ? true : false;
"
`;

exports[`Validating rule docs prefer-nullish-coalescing.mdx code examples ESLint output 5`] = `
"Incorrect
Options: { "ignoreMixedLogicalExpressions": false }

declare const a: string | null;
declare const b: string | null;
declare const c: string | null;
declare const d: string | null;

a || (b && c);
  ~~ Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.
a ||= b && c;
(a && b) || c || d;
         ~~ Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.
              ~~ Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.
a || (b && c) || d;
  ~~ Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.
              ~~ Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.
a || (b && c && d);
  ~~ Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.
"
`;

exports[`Validating rule docs prefer-nullish-coalescing.mdx code examples ESLint output 6`] = `
"Correct
Options: { "ignoreMixedLogicalExpressions": false }

declare const a: string | null;
declare const b: string | null;
declare const c: string | null;
declare const d: string | null;

a ?? (b && c);
a ??= b && c;
(a && b) ?? c ?? d;
a ?? (b && c) ?? d;
a ?? (b && c && d);
"
`;

exports[`Validating rule docs prefer-nullish-coalescing.mdx code examples ESLint output 7`] = `
"Incorrect
Options: { "ignorePrimitives": { "string": false } }

declare const foo: string | undefined;

foo || 'a string';
    ~~ Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.
"
`;

exports[`Validating rule docs prefer-nullish-coalescing.mdx code examples ESLint output 8`] = `
"Correct
Options: { "ignorePrimitives": { "string": false } }

declare const foo: string | undefined;

foo ?? 'a string';
"
`;

exports[`Validating rule docs prefer-nullish-coalescing.mdx code examples ESLint output 9`] = `
"Incorrect
Options: { "ignoreBooleanCoercion": false }

declare const a: string | true | undefined;
declare const b: string | boolean | undefined;

const x = Boolean(a || b);
                    ~~ Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.
"
`;

exports[`Validating rule docs prefer-nullish-coalescing.mdx code examples ESLint output 10`] = `
"Correct
Options: { "ignoreBooleanCoercion": false }

declare const a: string | true | undefined;
declare const b: string | boolean | undefined;

const x = Boolean(a ?? b);
"
`;
