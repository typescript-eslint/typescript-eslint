// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Validating rule docs no-misused-spread.mdx code examples ESLint output 1`] = `
"Incorrect

declare const promise: Promise<number>;
const spreadPromise = { ...promise };
                        ~~~~~~~~~~ Using the spread operator on Promise in an object can cause unexpected behavior. Did you forget to await the promise?

declare function getObject(): Record<string, strings>;
const getObjectSpread = { ...getObject };
                          ~~~~~~~~~~~~ Using the spread operator on a function without additional properties can cause unexpected behavior. Did you forget to call the function?

declare const map: Map<string, number>;
const mapSpread = { ...map };
                    ~~~~~~ Using the spread operator on a Map in an object will result in an empty object. Did you mean to use \`Object.fromEntries(map)\` instead?

declare const userName: string;
const characters = [...userName];
                    ~~~~~~~~~~~ Using the spread operator on a string can cause unexpected behavior. Prefer \`.split('')\` instead.
"
`;

exports[`Validating rule docs no-misused-spread.mdx code examples ESLint output 2`] = `
"Incorrect

declare class Box {
  value: number;
}
const boxSpread = { ...Box };
                    ~~~~~~ Using the spread operator on class declarations will spread only their static properties, and will lose their class prototype.

declare const instance: Box;
const instanceSpread = { ...instance };
                         ~~~~~~~~~~~ Using the spread operator on class instances will lose their class prototype.
"
`;

exports[`Validating rule docs no-misused-spread.mdx code examples ESLint output 3`] = `
"Correct

declare const promise: Promise<number>;
const spreadPromise = { ...(await promise) };

declare function getObject(): Record<string, strings>;
const getObjectSpread = { ...getObject() };

declare const map: Map<string, number>;
const mapObject = Object.fromEntries(map);

declare const userName: string;
const characters = userName.split('');
"
`;

exports[`Validating rule docs no-misused-spread.mdx code examples ESLint output 4`] = `
"Incorrect
Options: {"allow":[{ "from": "file", "name": "BrandedString" }]}

declare const unbrandedString: string;

const spreadUnbrandedString = [...unbrandedString];
                               ~~~~~~~~~~~~~~~~~~ Using the spread operator on a string can cause unexpected behavior. Prefer \`.split('')\` instead.
"
`;

exports[`Validating rule docs no-misused-spread.mdx code examples ESLint output 5`] = `
"Correct
Options: {"allow":[{ "from": "file", "name": "BrandedString" }]}

type BrandedString = string & { __brand: 'safe' };

declare const brandedString: BrandedString;

const spreadBrandedString = [...brandedString];
"
`;
