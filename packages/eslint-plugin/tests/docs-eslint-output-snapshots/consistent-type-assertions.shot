Incorrect
Options: { "assertionStyle": "as", "objectLiteralTypeAssertions": "never" }

const x = { foo: 1 } as T;
          ~~~~~~~~~~~~~~~ Always prefer const x: T = { ... }.

function bar() {
  return { foo: 1 } as T;
         ~~~~~~~~~~~~~~~ Always prefer const x: T = { ... }.
}

Correct
Options: { "assertionStyle": "as", "objectLiteralTypeAssertions": "never" }

const x: T = { foo: 1 };
const y = { foo: 1 } as any;
const z = { foo: 1 } as unknown;

function bar(): T {
  return { foo: 1 };
}

Incorrect
Options: { "assertionStyle": "as", "objectLiteralTypeAssertions": "allow-as-parameter" }

const x = { foo: 1 } as T;
          ~~~~~~~~~~~~~~~ Always prefer const x: T = { ... }.

function bar() {
  return { foo: 1 } as T;
         ~~~~~~~~~~~~~~~ Always prefer const x: T = { ... }.
}

Correct
Options: { "assertionStyle": "as", "objectLiteralTypeAssertions": "allow-as-parameter" }

const x: T = { foo: 1 };
const y = { foo: 1 } as any;
const z = { foo: 1 } as unknown;
bar({ foo: 1 } as T);
new Clazz({ foo: 1 } as T);
function bar() {
  throw { foo: 1 } as Foo;
}
const foo = <Foo props={{ bar: 1 } as Bar} />;

Incorrect
Options: { "assertionStyle": "as", "arrayLiteralTypeAssertions": "never" }

const x = ['foo'] as T;
          ~~~~~~~~~~~~ Always prefer const x: T[] = [ ... ].

function bar() {
  return ['foo'] as T;
         ~~~~~~~~~~~~ Always prefer const x: T[] = [ ... ].
}

Correct
Options: { "assertionStyle": "as", "arrayLiteralTypeAssertions": "never" }

const x: T = ['foo'];
const y = ['foo'] as any;
const z = ['foo'] as unknown;

function bar(): T {
  return ['foo'];
}

Incorrect
Options: { "assertionStyle": "as", "arrayLiteralTypeAssertions": "allow-as-parameter" }

const x = ['foo'] as T;
          ~~~~~~~~~~~~ Always prefer const x: T[] = [ ... ].

function bar() {
  return ['foo'] as T;
         ~~~~~~~~~~~~ Always prefer const x: T[] = [ ... ].
}

Correct
Options: { "assertionStyle": "as", "arrayLiteralTypeAssertions": "allow-as-parameter" }

const x: T = ['foo'];
const y = ['foo'] as any;
const z = ['foo'] as unknown;
bar(['foo'] as T);
new Clazz(['foo'] as T);
function bar() {
  throw ['foo'] as Foo;
}
const foo = <Foo props={['foo'] as Bar} />;
