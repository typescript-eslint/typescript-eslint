// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Validating rule docs consistent-type-assertions.mdx code examples ESLint output 1`] = `
"Incorrect
Options: { "assertionStyle": "as", "objectLiteralTypeAssertions": "never" }

const x = { foo: 1 } as T;
          ~~~~~~~~~~~~~~~ Always prefer const x: T = { ... }.

function bar() {
  return { foo: 1 } as T;
         ~~~~~~~~~~~~~~~ Always prefer const x: T = { ... }.
}
"
`;

exports[`Validating rule docs consistent-type-assertions.mdx code examples ESLint output 2`] = `
"Correct
Options: { "assertionStyle": "as", "objectLiteralTypeAssertions": "never" }

const x: T = { foo: 1 };
const y = { foo: 1 } as any;
const z = { foo: 1 } as unknown;

function bar(): T {
  return { foo: 1 };
}
"
`;

exports[`Validating rule docs consistent-type-assertions.mdx code examples ESLint output 3`] = `
"Incorrect
Options: { "assertionStyle": "as", "objectLiteralTypeAssertions": "allow-as-parameter" }

const x = { foo: 1 } as T;
          ~~~~~~~~~~~~~~~ Always prefer const x: T = { ... }.

function bar() {
  return { foo: 1 } as T;
         ~~~~~~~~~~~~~~~ Always prefer const x: T = { ... }.
}
"
`;

exports[`Validating rule docs consistent-type-assertions.mdx code examples ESLint output 4`] = `
"Correct
Options: { "assertionStyle": "as", "objectLiteralTypeAssertions": "allow-as-parameter" }

const x: T = { foo: 1 };
const y = { foo: 1 } as any;
const z = { foo: 1 } as unknown;
bar({ foo: 1 } as T);
new Clazz({ foo: 1 } as T);
function bar() {
  throw { foo: 1 } as Foo;
}
const foo = <Foo props={{ bar: 1 } as Bar} />;
"
`;
