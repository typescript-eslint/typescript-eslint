Incorrect
Options: { "default": ["signature", "method", "constructor", "field"] }

interface Foo {
  B: string; // -> field

  new (); // -> constructor
  ~~~~~~~ Member new should be declared before all field definitions.

  A(): void; // -> method
  ~~~~~~~~~~ Member A should be declared before all field definitions.

  [Z: string]: any; // -> signature
  ~~~~~~~~~~~~~~~~~ Member Z should be declared before all field definitions.
}

Incorrect
Options: { "default": ["signature", "method", "constructor", "field"] }

type Foo = {
  B: string; // -> field

  // no constructor

  A(): void; // -> method
  ~~~~~~~~~~ Member A should be declared before all field definitions.

  // no signature
};

Incorrect
Options: { "default": ["signature", "method", "constructor", "field"] }

class Foo {
  private C: string; // -> field
  public D: string; // -> field
  protected static E: string; // -> field

  constructor() {} // -> constructor
  ~~~~~~~~~~~~~~~~ Member constructor should be declared before all field definitions.

  public static A(): void {} // -> method
  ~~~~~~~~~~~~~~~~~~~~~~~~~~ Member A should be declared before all field definitions.
  public B(): void {} // -> method
  ~~~~~~~~~~~~~~~~~~~ Member B should be declared before all field definitions.

  [Z: string]: any; // -> signature
  ~~~~~~~~~~~~~~~~~ Member Z should be declared before all field definitions.
}

Incorrect
Options: { "default": ["signature", "method", "constructor", "field"] }

const Foo = class {
  private C: string; // -> field
  public D: string; // -> field

  constructor() {} // -> constructor
  ~~~~~~~~~~~~~~~~ Member constructor should be declared before all field definitions.

  public static A(): void {} // -> method
  ~~~~~~~~~~~~~~~~~~~~~~~~~~ Member A should be declared before all field definitions.
  public B(): void {} // -> method
  ~~~~~~~~~~~~~~~~~~~ Member B should be declared before all field definitions.

  [Z: string]: any; // -> signature
  ~~~~~~~~~~~~~~~~~ Member Z should be declared before all field definitions.

  protected static E: string; // -> field
};

Correct
Options: { "default": ["signature", "method", "constructor", "field"] }

interface Foo {
  [Z: string]: any; // -> signature

  A(): void; // -> method

  new (); // -> constructor

  B: string; // -> field
}

Correct
Options: { "default": ["signature", "method", "constructor", "field"] }

type Foo = {
  // no signature

  A(): void; // -> method

  // no constructor

  B: string; // -> field
};

Correct
Options: { "default": ["signature", "method", "constructor", "field"] }

class Foo {
  [Z: string]: any; // -> signature

  public static A(): void {} // -> method
  public B(): void {} // -> method

  constructor() {} // -> constructor

  private C: string; // -> field
  public D: string; // -> field
  protected static E: string; // -> field
}

Correct
Options: { "default": ["signature", "method", "constructor", "field"] }

const Foo = class {
  [Z: string]: any; // -> signature

  public static A(): void {} // -> method
  public B(): void {} // -> method

  constructor() {} // -> constructor

  private C: string; // -> field
  public D: string; // -> field
  protected static E: string; // -> field
};

Incorrect
Options: { "default": ["public-instance-method", "public-static-field"] }

class Foo {
  private C: string; // (irrelevant)

  public D: string; // (irrelevant)

  public static E: string; // -> public static field

  constructor() {} // (irrelevant)

  public static A(): void {} // (irrelevant)

  [Z: string]: any; // (irrelevant)

  public B(): void {} // -> public instance method
  ~~~~~~~~~~~~~~~~~~~ Member B should be declared before all public static field definitions.
}

Incorrect
Options: { "default": ["public-instance-method", "public-static-field"] }

const Foo = class {
  private C: string; // (irrelevant)

  [Z: string]: any; // (irrelevant)

  public static E: string; // -> public static field

  public D: string; // (irrelevant)

  constructor() {} // (irrelevant)

  public static A(): void {} // (irrelevant)

  public B(): void {} // -> public instance method
  ~~~~~~~~~~~~~~~~~~~ Member B should be declared before all public static field definitions.
};

Correct
Options: { "default": ["public-instance-method", "public-static-field"] }

class Foo {
  public B(): void {} // -> public instance method

  private C: string; // (irrelevant)

  public D: string; // (irrelevant)

  public static E: string; // -> public static field

  constructor() {} // (irrelevant)

  public static A(): void {} // (irrelevant)

  [Z: string]: any; // (irrelevant)
}

Correct
Options: { "default": ["public-instance-method", "public-static-field"] }

const Foo = class {
  public B(): void {} // -> public instance method

  private C: string; // (irrelevant)

  [Z: string]: any; // (irrelevant)

  public D: string; // (irrelevant)

  constructor() {} // (irrelevant)

  public static A(): void {} // (irrelevant)

  public static E: string; // -> public static field
};

Incorrect
Options: { "default": ["public-static-field", "static-field", "instance-field"] }

class Foo {
  private E: string; // -> instance field

  private static B: string; // -> static field
  ~~~~~~~~~~~~~~~~~~~~~~~~~ Member B should be declared before all instance field definitions.
  protected static C: string; // -> static field
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~ Member C should be declared before all instance field definitions.
  private static D: string; // -> static field
  ~~~~~~~~~~~~~~~~~~~~~~~~~ Member D should be declared before all instance field definitions.

  public static A: string; // -> public static field
  ~~~~~~~~~~~~~~~~~~~~~~~~ Member A should be declared before all instance field definitions.

  [Z: string]: any; // (irrelevant)
}

Incorrect
Options: { "default": ["public-static-field", "static-field", "instance-field"] }

const foo = class {
  public T(): void {} // method (irrelevant)

  private static B: string; // -> static field

  constructor() {} // constructor (irrelevant)

  private E: string; // -> instance field

  protected static C: string; // -> static field
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~ Member C should be declared before all instance field definitions.
  private static D: string; // -> static field
  ~~~~~~~~~~~~~~~~~~~~~~~~~ Member D should be declared before all instance field definitions.

  [Z: string]: any; // signature (irrelevant)

  public static A: string; // -> public static field
  ~~~~~~~~~~~~~~~~~~~~~~~~ Member A should be declared before all static field definitions.
};

Correct
Options: { "default": ["public-static-field", "static-field", "instance-field"] }

class Foo {
  public static A: string; // -> public static field

  private static B: string; // -> static field
  protected static C: string; // -> static field
  private static D: string; // -> static field

  private E: string; // -> instance field

  [Z: string]: any; // (irrelevant)
}

Correct
Options: { "default": ["public-static-field", "static-field", "instance-field"] }

const foo = class {
  [Z: string]: any; // -> signature (irrelevant)

  public static A: string; // -> public static field

  constructor() {} // -> constructor (irrelevant)

  private static B: string; // -> static field
  protected static C: string; // -> static field
  private static D: string; // -> static field

  private E: string; // -> instance field

  public T(): void {} // -> method (irrelevant)
};

Incorrect
Options: { "classes": ["method", "constructor", "field"] }

class Foo {
  private C: string; // -> field
  public D: string; // -> field
  protected static E: string; // -> field

  constructor() {} // -> constructor
  ~~~~~~~~~~~~~~~~ Member constructor should be declared before all field definitions.

  public static A(): void {} // -> method
  ~~~~~~~~~~~~~~~~~~~~~~~~~~ Member A should be declared before all field definitions.
  public B(): void {} // -> method
  ~~~~~~~~~~~~~~~~~~~ Member B should be declared before all field definitions.
}

Correct
Options: { "classes": ["method", "constructor", "field"] }

class Foo {
  public static A(): void {} // -> method
  public B(): void {} // -> method

  constructor() {} // -> constructor

  private C: string; // -> field
  public D: string; // -> field
  protected static E: string; // -> field
}

Incorrect
Options: { "classExpressions": ["method", "constructor", "field"] }

const foo = class {
  private C: string; // -> field
  public D: string; // -> field
  protected static E: string; // -> field

  constructor() {} // -> constructor
  ~~~~~~~~~~~~~~~~ Member constructor should be declared before all field definitions.

  public static A(): void {} // -> method
  ~~~~~~~~~~~~~~~~~~~~~~~~~~ Member A should be declared before all field definitions.
  public B(): void {} // -> method
  ~~~~~~~~~~~~~~~~~~~ Member B should be declared before all field definitions.
};

Correct
Options: { "classExpressions": ["method", "constructor", "field"] }

const foo = class {
  public static A(): void {} // -> method
  public B(): void {} // -> method

  constructor() {} // -> constructor

  private C: string; // -> field
  public D: string; // -> field
  protected static E: string; // -> field
};

Incorrect
Options: { "interfaces": ["signature", "method", "constructor", "field"] }

interface Foo {
  B: string; // -> field

  new (); // -> constructor
  ~~~~~~~ Member new should be declared before all field definitions.

  A(): void; // -> method
  ~~~~~~~~~~ Member A should be declared before all field definitions.

  [Z: string]: any; // -> signature
  ~~~~~~~~~~~~~~~~~ Member Z should be declared before all field definitions.
}

Correct
Options: { "interfaces": ["signature", "method", "constructor", "field"] }

interface Foo {
  [Z: string]: any; // -> signature

  A(): void; // -> method

  new (); // -> constructor

  B: string; // -> field
}

Incorrect
Options: { "typeLiterals": ["signature", "method", "constructor", "field"] }

type Foo = {
  B: string; // -> field

  A(): void; // -> method
  ~~~~~~~~~~ Member A should be declared before all field definitions.

  new (); // -> constructor
  ~~~~~~~ Member new should be declared before all field definitions.

  [Z: string]: any; // -> signature
  ~~~~~~~~~~~~~~~~~ Member Z should be declared before all field definitions.
};

Correct
Options: { "typeLiterals": ["signature", "method", "constructor", "field"] }

type Foo = {
  [Z: string]: any; // -> signature

  A(): void; // -> method

  new (); // -> constructor

  B: string; // -> field
};

Incorrect
Options: {"default":{"order":"alphabetically"}}

interface Foo {
  a: x;
  B: x;
  ~~~~~ Member B should be declared before member a.
  c: x;

  B(): void;
  c(): void;
  a(): void;
  ~~~~~~~~~~ Member a should be declared before member c.
}

Correct
Options: {"default":{"order":"alphabetically"}}

interface Foo {
  B: x;
  a: x;
  c: x;

  B(): void;
  a(): void;
  c(): void;
}

Incorrect
Options: {"default":{"memberTypes":["method","field"],"order":"alphabetically"}}

interface Foo {
  B(): void;
  c(): void;
  a(): void;
  ~~~~~~~~~~ Member a should be declared before member c.

  a: x;
  B: x;
  ~~~~~ Member B should be declared before member a.
  c: x;
}

Correct
Options: {"default":{"memberTypes":["method","field"],"order":"alphabetically"}}

interface Foo {
  B(): void;
  a(): void;
  c(): void;

  B: x;
  a: x;
  c: x;
}

Incorrect
Options: {"default":{"order":"alphabetically-case-insensitive"}}

interface Foo {
  B: x;
  a: x;
  ~~~~~ Member a should be declared before member B.
  c: x;

  B(): void;
  c(): void;
  a(): void;
  ~~~~~~~~~~ Member a should be declared before member c.
}

Correct
Options: {"default":{"order":"alphabetically-case-insensitive"}}

interface Foo {
  a: x;
  B: x;
  c: x;

  a(): void;
  B(): void;
  c(): void;
}

Incorrect
Options: { "default": { "memberTypes": "never", "order": "alphabetically" } }

interface Foo {
  b(): void;
  a: boolean;
  ~~~~~~~~~~~ Member a should be declared before member b.

  [a: string]: number;
  new (): Bar;
  (): Baz;
  ~~~~~~~~ Member call should be declared before member new.
}

Correct
Options: { "default": { "memberTypes": "never", "order": "alphabetically" } }

interface Foo {
  [a: string]: number;
  a: boolean;
  b(): void;

  (): Baz;
  new (): Bar;
}

Incorrect
Options: { "default": { "optionalityOrder": "optional-first", "order": "alphabetically" } }

interface Foo {
  a: boolean;
  ~~~~~~~~~~~ Member a should be declared after all optional members.
  b?: number;
  c: string;
}

Correct
Options: { "default": { "optionalityOrder": "optional-first", "order": "alphabetically" } }

interface Foo {
  b?: number;
  a: boolean;
  c: string;
}

Incorrect
Options: { "default": { "optionalityOrder": "required-first", "order": "alphabetically" } }

interface Foo {
  a: boolean;
  b?: number;
  ~~~~~~~~~~~ Member b should be declared after all required members.
  c: string;
}

Correct
Options: { "default": { "optionalityOrder": "required-first", "order": "alphabetically" } }

interface Foo {
  a: boolean;
  c: string;
  b?: number;
}
