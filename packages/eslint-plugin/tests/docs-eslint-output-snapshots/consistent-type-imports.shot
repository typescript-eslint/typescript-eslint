// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Validating rule docs consistent-type-imports.mdx code examples ESLint output 1`] = `
"Options: { "prefer": "type-imports" }

import type { Foo } from 'Foo';
import type Bar from 'Bar';
type T = Foo;
const x: Bar = 1;
"
`;

exports[`Validating rule docs consistent-type-imports.mdx code examples ESLint output 2`] = `
"Options: { "prefer": "type-imports" }

import { Foo } from 'Foo';
~~~~~~~~~~~~~~~~~~~~~~~~~~ All imports in the declaration are only used as types. Use \`import type\`.
import Bar from 'Bar';
~~~~~~~~~~~~~~~~~~~~~~ All imports in the declaration are only used as types. Use \`import type\`.
type T = Foo;
const x: Bar = 1;
"
`;

exports[`Validating rule docs consistent-type-imports.mdx code examples ESLint output 3`] = `
"Incorrect

import { Foo } from 'Foo';
~~~~~~~~~~~~~~~~~~~~~~~~~~ All imports in the declaration are only used as types. Use \`import type\`.
import Bar from 'Bar';
~~~~~~~~~~~~~~~~~~~~~~ All imports in the declaration are only used as types. Use \`import type\`.
type T = Foo;
const x: Bar = 1;
"
`;

exports[`Validating rule docs consistent-type-imports.mdx code examples ESLint output 4`] = `
"Options: { "fixStyle": "separate-type-imports" }

import type { Foo } from 'Foo';
import type Bar from 'Bar';
type T = Foo;
const x: Bar = 1;
"
`;

exports[`Validating rule docs consistent-type-imports.mdx code examples ESLint output 5`] = `
"Options: { "fixStyle": "inline-type-imports" }

import { type Foo } from 'Foo';
import type Bar from 'Bar';
type T = Foo;
const x: Bar = 1;
"
`;

exports[`Validating rule docs consistent-type-imports.mdx code examples ESLint output 6`] = `
"Options: { "disallowTypeAnnotations": true }

type T = import('Foo').Foo;
         ~~~~~~~~~~~~~~~~~ \`import()\` type annotations are forbidden.
const x: import('Bar') = 1;
         ~~~~~~~~~~~~~ \`import()\` type annotations are forbidden.
"
`;
