Incorrect
Options: "constructor"

const map: Map<string, number> = new Map();
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The generic type arguments should be specified as part of the constructor type arguments.
const set: Set<string> = new Set();
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The generic type arguments should be specified as part of the constructor type arguments.

Correct
Options: "constructor"

const map = new Map<string, number>();
const map: Map<string, number> = new MyMap();
const set = new Set<string>();
const set = new Set();
const set: Set<string> = new Set<string>();

Incorrect
Options: "type-annotation"

const map = new Map<string, number>();
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The generic type arguments should be specified as part of the type annotation.
const set = new Set<string>();
      ~~~~~~~~~~~~~~~~~~~~~~~ The generic type arguments should be specified as part of the type annotation.

Correct
Options: "type-annotation"

const map: Map<string, number> = new Map();
const set: Set<string> = new Set();
const set = new Set();
const set: Set<string> = new Set<string>();

Incorrect
Options: "constructor"

// Incorrect because Uint8Array has deffenrent type signature and not in ignorelist
let a: Uint8Array<ArrayBufferLike> = new Uint8Array();
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The generic type arguments should be specified as part of the constructor type arguments.

// Incorrect because type arguments appear in type-annotation and not in ignorelist
let a: UserConstructor<Type> = new UserConstructor();
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The generic type arguments should be specified as part of the constructor type arguments.

Correct
Options: "constructor", { "ignore": ["Uint8Array", "UserConstructor"] }

// Correct because Uint8Array has deffenrent type signature but are included in the ignorelist.
let a: Uint8Array<ArrayBufferLike> = new Uint8Array();

// Correct because type arguments appear in type-annotations but are included in the ignorelist.
let a: UserConstructor<Type> = new UserConstructor();
