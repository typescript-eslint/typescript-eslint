// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Validating rule docs switch-exhaustiveness-check.mdx code examples ESLint output 1`] = `
"Options: { "requireDefaultForNonUnion": true }

const value: number = Math.floor(Math.random() * 3);

switch (value) {
        ~~~~~ Switch is not exhaustive. Cases not matched: default
  case 0:
    return 0;
  case 1:
    return 1;
}
"
`;

exports[`Validating rule docs switch-exhaustiveness-check.mdx code examples ESLint output 2`] = `
"Incorrect

type Day =
  | 'Monday'
  | 'Tuesday'
  | 'Wednesday'
  | 'Thursday'
  | 'Friday'
  | 'Saturday'
  | 'Sunday';

declare const day: Day;
let result = 0;

switch (day) {
        ~~~ Switch is not exhaustive. Cases not matched: "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday"
  case 'Monday':
    result = 1;
    break;
}
"
`;

exports[`Validating rule docs switch-exhaustiveness-check.mdx code examples ESLint output 3`] = `
"Correct

type Day =
  | 'Monday'
  | 'Tuesday'
  | 'Wednesday'
  | 'Thursday'
  | 'Friday'
  | 'Saturday'
  | 'Sunday';

declare const day: Day;
let result = 0;

switch (day) {
  case 'Monday':
    result = 1;
    break;
  case 'Tuesday':
    result = 2;
    break;
  case 'Wednesday':
    result = 3;
    break;
  case 'Thursday':
    result = 4;
    break;
  case 'Friday':
    result = 5;
    break;
  case 'Saturday':
    result = 6;
    break;
  case 'Sunday':
    result = 7;
    break;
}
"
`;

exports[`Validating rule docs switch-exhaustiveness-check.mdx code examples ESLint output 4`] = `
"Correct

type Day =
  | 'Monday'
  | 'Tuesday'
  | 'Wednesday'
  | 'Thursday'
  | 'Friday'
  | 'Saturday'
  | 'Sunday';

declare const day: Day;
let result = 0;

switch (day) {
  case 'Monday':
    result = 1;
    break;
  default:
    result = 42;
}
"
`;

exports[`Validating rule docs switch-exhaustiveness-check.mdx code examples ESLint output 5`] = `
"Incorrect

enum Fruit {
  Apple,
  Banana,
  Cherry,
}

declare const fruit: Fruit;

switch (fruit) {
        ~~~~~ Switch is not exhaustive. Cases not matched: Fruit.Banana | Fruit.Cherry
  case Fruit.Apple:
    console.log('an apple');
    break;
}
"
`;

exports[`Validating rule docs switch-exhaustiveness-check.mdx code examples ESLint output 6`] = `
"Correct

enum Fruit {
  Apple,
  Banana,
  Cherry,
}

declare const fruit: Fruit;

switch (fruit) {
  case Fruit.Apple:
    console.log('an apple');
    break;

  case Fruit.Banana:
    console.log('a banana');
    break;

  case Fruit.Cherry:
    console.log('a cherry');
    break;
}
"
`;

exports[`Validating rule docs switch-exhaustiveness-check.mdx code examples ESLint output 7`] = `
"Correct

enum Fruit {
  Apple,
  Banana,
  Cherry,
}

declare const fruit: Fruit;

switch (fruit) {
  case Fruit.Apple:
    console.log('an apple');
    break;

  default:
    console.log('a fruit');
    break;
}
"
`;
