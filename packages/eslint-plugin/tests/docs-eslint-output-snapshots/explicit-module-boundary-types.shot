// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Validating rule docs explicit-module-boundary-types.mdx code examples ESLint output 1`] = `
"Incorrect

// Should indicate that no value is returned (void)
export function test() {
       ~~~~~~~~~~~~~ Missing return type on function.
  return;
}

// Should indicate that a string is returned
export var arrowFn = () => 'test';
                        ~~ Missing return type on function.

// All arguments should be typed
export var arrowFn = (arg): string => \`test \${arg}\`;
                      ~~~ Argument 'arg' should be typed.
export var arrowFn = (arg: any): string => \`test \${arg}\`;
                      ~~~~~~~~ Argument 'arg' should be typed with a non-any type.

export class Test {
  // Should indicate that no value is returned (void)
  method() {
  ~~~~~~ Missing return type on function.
    return;
  }
}
"
`;

exports[`Validating rule docs explicit-module-boundary-types.mdx code examples ESLint output 2`] = `
"Correct

// A function with no return value (void)
export function test(): void {
  return;
}

// A return value of type string
export var arrowFn = (): string => 'test';

// All arguments should be typed
export var arrowFn = (arg: string): string => \`test \${arg}\`;
export var arrowFn = (arg: unknown): string => \`test \${arg}\`;

export class Test {
  // A class method with no return value (void)
  method(): void {
    return;
  }
}

// The function does not apply because it is not an exported function.
function test() {
  return;
}
"
`;

exports[`Validating rule docs explicit-module-boundary-types.mdx code examples ESLint output 3`] = `
"Incorrect
Options: { "allowArgumentsExplicitlyTypedAsAny": false }

export const func = (value: any): number => value + 1;
                     ~~~~~~~~~~ Argument 'value' should be typed with a non-any type.
"
`;

exports[`Validating rule docs explicit-module-boundary-types.mdx code examples ESLint output 4`] = `
"Correct
Options: { "allowArgumentsExplicitlyTypedAsAny": true }

export const func = (value: any): number => value + 1;
"
`;

exports[`Validating rule docs explicit-module-boundary-types.mdx code examples ESLint output 5`] = `
"Incorrect
Options: { "allowDirectConstAssertionInArrowFunctions": false }

export const func = (value: number) => ({ type: 'X', value });
                                    ~~ Missing return type on function.
export const foo = () => ({
                      ~~ Missing return type on function.
  bar: true,
});
export const bar = () => 1;
                      ~~ Missing return type on function.
"
`;

exports[`Validating rule docs explicit-module-boundary-types.mdx code examples ESLint output 6`] = `
"Correct
Options: { "allowDirectConstAssertionInArrowFunctions": true }

export const func = (value: number) => ({ type: 'X', value }) as const;
export const foo = () =>
  ({
    bar: true,
  }) as const;
export const bar = () => 1 as const;
"
`;

exports[`Validating rule docs explicit-module-boundary-types.mdx code examples ESLint output 7`] = `
"Incorrect
Options: { "allowHigherOrderFunctions": false }

export const arrowFn = () => () => {};
                          ~~ Missing return type on function.
                                ~~ Missing return type on function.

export function fn() {
       ~~~~~~~~~~~ Missing return type on function.
  return function () {};
         ~~~~~~~~~ Missing return type on function.
}

export function foo(outer: string) {
       ~~~~~~~~~~~~ Missing return type on function.
  return function (inner: string) {};
         ~~~~~~~~~ Missing return type on function.
}
"
`;

exports[`Validating rule docs explicit-module-boundary-types.mdx code examples ESLint output 8`] = `
"Correct
Options: { "allowHigherOrderFunctions": true }

export const arrowFn = () => (): void => {};

export function fn() {
  return function (): void {};
}

export function foo(outer: string) {
  return function (inner: string): void {};
}
"
`;

exports[`Validating rule docs explicit-module-boundary-types.mdx code examples ESLint output 9`] = `
"Incorrect
Options: { "allowTypedFunctionExpressions": false }

export let arrowFn = () => 'test';
                        ~~ Missing return type on function.

export let funcExpr = function () {
                      ~~~~~~~~~ Missing return type on function.
  return 'test';
};

export let objectProp = {
  foo: () => 1,
  ~~~~~ Missing return type on function.
};

export const foo = bar => {};
                   ~~~ Argument 'bar' should be typed.
                       ~~ Missing return type on function.
"
`;

exports[`Validating rule docs explicit-module-boundary-types.mdx code examples ESLint output 10`] = `
"Correct
Options: { "allowTypedFunctionExpressions": true }

type FuncType = () => string;

export let arrowFn: FuncType = () => 'test';

export let funcExpr: FuncType = function () {
  return 'test';
};

export let asTyped = (() => '') as () => string;
export let castTyped = <() => string>(() => '');

interface ObjectType {
  foo(): number;
}
export let objectProp: ObjectType = {
  foo: () => 1,
};
export let objectPropAs = {
  foo: () => 1,
} as ObjectType;
export let objectPropCast = <ObjectType>{
  foo: () => 1,
};

type FooType = (bar: string) => void;
export const foo: FooType = bar => {};
"
`;
