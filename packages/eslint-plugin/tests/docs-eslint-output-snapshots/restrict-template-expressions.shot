// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Validating rule docs > restrict-template-expressions.mdx > code examples ESLint output`]
Incorrect

const arg1 = [1, 2];
const msg1 = `arg1 = ${arg1}`;
                       ~~~~ Invalid type "number[]" of template literal expression.

const arg2 = { name: 'Foo' };
const msg2 = `arg2 = ${arg2 || null}`;
                       ~~~~~~~~~~~~ Invalid type "{ name: string; }" of template literal expression.

exports[`Validating rule docs > restrict-template-expressions.mdx > code examples ESLint output`]
Correct

const arg = 'foo';
const msg1 = `arg = ${arg}`;
const msg2 = `arg = ${arg || 'default'}`;

const stringWithKindProp: string & { _kind?: 'MyString' } = 'foo';
const msg3 = `stringWithKindProp = ${stringWithKindProp}`;

exports[`Validating rule docs > restrict-template-expressions.mdx > code examples ESLint output`]
Options: { "allowNumber": true }

const arg = 123;
const msg1 = `arg = ${arg}`;
const msg2 = `arg = ${arg || 'zero'}`;

exports[`Validating rule docs > restrict-template-expressions.mdx > code examples ESLint output`]
Options: { "allowBoolean": true }

const arg = true;
const msg1 = `arg = ${arg}`;
const msg2 = `arg = ${arg || 'not truthy'}`;

exports[`Validating rule docs > restrict-template-expressions.mdx > code examples ESLint output`]
Options: { "allowAny": true }

const user = JSON.parse('{ "name": "foo" }');
const msg1 = `arg = ${user.name}`;
const msg2 = `arg = ${user.name || 'the user with no name'}`;

exports[`Validating rule docs > restrict-template-expressions.mdx > code examples ESLint output`]
Options: { "allowNullish": true }

const arg = condition ? 'ok' : null;
const msg1 = `arg = ${arg}`;

exports[`Validating rule docs > restrict-template-expressions.mdx > code examples ESLint output`]
Options: { "allowRegExp": true }

const arg = new RegExp('foo');
const msg1 = `arg = ${arg}`;

exports[`Validating rule docs > restrict-template-expressions.mdx > code examples ESLint output`]
Options: { "allowRegExp": true }

const arg = /foo/;
const msg1 = `arg = ${arg}`;

exports[`Validating rule docs > restrict-template-expressions.mdx > code examples ESLint output`]
Options: { "allowNever": true }

const arg = 'something';
const msg1 = typeof arg === 'string' ? arg : `arg = ${arg}`;

exports[`Validating rule docs > restrict-template-expressions.mdx > code examples ESLint output`]
Options: { "allowArray": true }

const arg = ['foo', 'bar'];
const msg1 = `arg = ${arg}`;

exports[`Validating rule docs > restrict-template-expressions.mdx > code examples ESLint output`]

const error = new Error();
const msg1 = `arg = ${error}`;
