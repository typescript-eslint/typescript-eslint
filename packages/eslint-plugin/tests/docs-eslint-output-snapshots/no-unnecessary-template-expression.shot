// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Validating rule docs no-unnecessary-template-expression.mdx code examples ESLint output 1`] = `
"Incorrect

// Static values can be incorporated into the surrounding template.

const ab1 = \`\${'a'}\${'b'}\`;
             ~~~~~~ Template literal expression is unnecessary and can be simplified.
                   ~~~~~~ Template literal expression is unnecessary and can be simplified.
const ab2 = \`a\${'b'}\`;
              ~~~~~~ Template literal expression is unnecessary and can be simplified.
type AB1 = \`\${'A'}\${'B'}\`;
            ~~~~~~ Template literal expression is unnecessary and can be simplified.
                  ~~~~~~ Template literal expression is unnecessary and can be simplified.
type AB2 = \`A\${'B'}\`;
             ~~~~~~ Template literal expression is unnecessary and can be simplified.

const stringWithNumber = \`\${'1 + 1 = '}\${2}\`;
                          ~~~~~~~~~~~~~ Template literal expression is unnecessary and can be simplified.
                                       ~~~~ Template literal expression is unnecessary and can be simplified.

const stringWithBoolean = \`\${'true is '}\${true}\`;
                           ~~~~~~~~~~~~~ Template literal expression is unnecessary and can be simplified.
                                        ~~~~~~~ Template literal expression is unnecessary and can be simplified.

// Some simple expressions that are already strings
// can be rewritten without a template at all.

const text = 'a';
const wrappedText = \`\${text}\`;
                     ~~~~~~~ Template literal expression is unnecessary and can be simplified.
type Text = 'A';
type WrappedText = \`\${Text}\`;
                    ~~~~~~~ Template literal expression is unnecessary and can be simplified.

declare const intersectionWithString: string & { _brand: 'test-brand' };
const wrappedIntersection = \`\${intersectionWithString}\`;
                             ~~~~~~~~~~~~~~~~~~~~~~~~~ Template literal expression is unnecessary and can be simplified.
type IntersectionWithString = string & { _brand: 'test-brand' };
type WrappedIntersection = \`\${IntersectionWithString}\`;
                            ~~~~~~~~~~~~~~~~~~~~~~~~~ Template literal expression is unnecessary and can be simplified.
"
`;

exports[`Validating rule docs no-unnecessary-template-expression.mdx code examples ESLint output 2`] = `
"Correct

// Static values can be incorporated into the surrounding template.

const ab1 = \`ab\`;
const ab2 = \`ab\`;
type AB = \`AB\`;

// Transforming enum members into string unions using template literals is allowed.
enum ABC {
  A = 'A',
  B = 'B',
  C = 'C',
}
type ABCUnion = \`\${ABC}\`;

// Interpolating type parameters is allowed.
type TextUtil<T extends string> = \`\${T}\`;

const stringWithNumber = \`1 + 1 = 2\`;

const stringWithBoolean = \`true is true\`;

// Some simple expressions that are already strings
// can be rewritten without a template at all.

const text = 'a';
const wrappedText = text;
type Text = 'A';
type WrappedText = Text;

declare const intersectionWithString: string & { _brand: 'test-brand' };
const wrappedIntersection = intersectionWithString;
type IntersectionWithString = string & { _brand: 'test-brand' };
type WrappedIntersection = IntersectionWithString;
"
`;
