// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Validating rule docs > no-unused-vars.mdx > code examples ESLint output`]

const box = {
      ~~~ 'box' is assigned a value but only used as a type.
  //  ~~~
  //  'box' is assigned a value but only used as a type.
  value: 123,
};

export type Box = typeof box;

exports[`Validating rule docs > no-unused-vars.mdx > code examples ESLint output`]

export interface Box {
  value: number;
}

exports[`Validating rule docs > no-unused-vars.mdx > code examples ESLint output`]

import { z } from 'zod';

const schema = z.object({
      ~~~~~~ 'schema' is assigned a value but only used as a type.
  //  ~~~~~~
  //  'schema' is assigned a value but only used as a type.
  value: z.number(),
});

export type Box = z.infer<typeof schema>;

exports[`Validating rule docs > no-unused-vars.mdx > code examples ESLint output`]

export interface Box {
  value: number;
}
