Incorrect

class MyClass {
  public log(): void {
    console.log(this);
  }
}

const instance = new MyClass();

// This logs the global scope (`window`/`global`), not the class instance
const myLog = instance.log;
              ~~~~~~~~~~~~ A method that is not declared with `this: void` may cause unintentional scoping of `this` when separated from its object.
                           Consider using an arrow function or explicitly `.bind()`ing the method to avoid calling the method with an unintended `this` value. 
                           If a function does not access `this`, it can be annotated with `this: void`.
myLog();

// This log might later be called with an incorrect scope
const { log } = instance;
        ~~~ A method that is not declared with `this: void` may cause unintentional scoping of `this` when separated from its object.
            Consider using an arrow function or explicitly `.bind()`ing the method to avoid calling the method with an unintended `this` value. 
            If a function does not access `this`, it can be annotated with `this: void`.

// arith.double may refer to `this` internally
const arith = {
  double(x: number): number {
    return x * 2;
  },
};
const { double } = arith;
        ~~~~~~ A method that is not declared with `this: void` may cause unintentional scoping of `this` when separated from its object.
               Consider using an arrow function or explicitly `.bind()`ing the method to avoid calling the method with an unintended `this` value. 
               If a function does not access `this`, it can be annotated with `this: void`.

Correct

class MyClass {
  public logUnbound(): void {
    console.log(this);
  }

  public logBound = () => console.log(this);
}

const instance = new MyClass();

// logBound will always be bound with the correct scope
const { logBound } = instance;
logBound();

// .bind and lambdas will also add a correct scope
const dotBindLog = instance.logUnbound.bind(instance);
const innerLog = () => instance.logUnbound();

// arith.double explicitly declares that it does not refer to `this` internally
const arith = {
  double(this: void, x: number): number {
    return x * 2;
  },
};
const { double } = arith;

Options: { "ignoreStatic": true }

class OtherClass {
  static log() {
    console.log(OtherClass);
  }
}

// With `ignoreStatic`, statics are assumed to not rely on a particular scope
const { log } = OtherClass;

log();
