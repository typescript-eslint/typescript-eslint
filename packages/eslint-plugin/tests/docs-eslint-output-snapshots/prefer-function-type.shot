// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Validating rule docs > prefer-function-type.mdx > code examples ESLint output`]
Incorrect

interface Example {
  (): string;
  ~~~~~~~~~~~ Interface only has a call signature, you should use a function type instead.
}

exports[`Validating rule docs > prefer-function-type.mdx > code examples ESLint output`]
Incorrect

function foo(example: { (): number }): number {
                        ~~~~~~~~~~ Type literal only has a call signature, you should use a function type instead.
  return example();
}

exports[`Validating rule docs > prefer-function-type.mdx > code examples ESLint output`]
Incorrect

interface ReturnsSelf {
  // returns the function itself, not the `this` argument.
  (arg: string): this;
                 ~~~~ `this` refers to the function type 'ReturnsSelf', did you intend to use a generic `this` parameter like `<Self>(this: Self, ...) => Self` instead?
}

exports[`Validating rule docs > prefer-function-type.mdx > code examples ESLint output`]
Correct

type Example = () => string;

exports[`Validating rule docs > prefer-function-type.mdx > code examples ESLint output`]
Correct

function foo(example: () => number): number {
  return bar();
}

exports[`Validating rule docs > prefer-function-type.mdx > code examples ESLint output`]
Correct

// returns the function itself, not the `this` argument.
type ReturnsSelf = (arg: string) => ReturnsSelf;

exports[`Validating rule docs > prefer-function-type.mdx > code examples ESLint output`]
Correct

function foo(bar: { (): string; baz: number }): string {
  return bar();
}

exports[`Validating rule docs > prefer-function-type.mdx > code examples ESLint output`]
Correct

interface Foo {
  bar: string;
}
interface Bar extends Foo {
  (): void;
}

exports[`Validating rule docs > prefer-function-type.mdx > code examples ESLint output`]
Correct

// multiple call signatures (overloads) is allowed:
interface Overloaded {
  (data: string): number;
  (id: number): string;
}
// this is equivelent to Overloaded interface.
type Intersection = ((data: string) => number) & ((id: number) => string);
