// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Validating rule docs > no-unnecessary-type-assertion.mdx > code examples ESLint output`]
Incorrect

const foo = 3;
const bar = foo!;
            ~~~~ This assertion is unnecessary since it does not change the type of the expression.

exports[`Validating rule docs > no-unnecessary-type-assertion.mdx > code examples ESLint output`]
Incorrect

const foo = <number>(3 + 5);
            ~~~~~~~~~~~~~~~ This assertion is unnecessary since it does not change the type of the expression.

exports[`Validating rule docs > no-unnecessary-type-assertion.mdx > code examples ESLint output`]
Incorrect

type Foo = number;
const foo = <Foo>(3 + 5);
            ~~~~~~~~~~~~ This assertion is unnecessary since it does not change the type of the expression.

exports[`Validating rule docs > no-unnecessary-type-assertion.mdx > code examples ESLint output`]
Incorrect

type Foo = number;
const foo = (3 + 5) as Foo;
            ~~~~~~~~~~~~~~ This assertion is unnecessary since it does not change the type of the expression.

exports[`Validating rule docs > no-unnecessary-type-assertion.mdx > code examples ESLint output`]
Incorrect

const foo = 'foo' as const;
            ~~~~~~~~~~~~~~ This assertion is unnecessary since it does not change the type of the expression.

exports[`Validating rule docs > no-unnecessary-type-assertion.mdx > code examples ESLint output`]
Incorrect

function foo(x: number): number {
  return x!; // unnecessary non-null
         ~~ This assertion is unnecessary since it does not change the type of the expression.
}

exports[`Validating rule docs > no-unnecessary-type-assertion.mdx > code examples ESLint output`]
Correct

const foo = <number>3;

exports[`Validating rule docs > no-unnecessary-type-assertion.mdx > code examples ESLint output`]
Correct

const foo = 3 as number;

exports[`Validating rule docs > no-unnecessary-type-assertion.mdx > code examples ESLint output`]
Correct

let foo = 'foo' as const;

exports[`Validating rule docs > no-unnecessary-type-assertion.mdx > code examples ESLint output`]
Correct

function foo(x: number | undefined): number {
  return x!;
}

exports[`Validating rule docs > no-unnecessary-type-assertion.mdx > code examples ESLint output`]
Options: { "typesToIgnore": ["Foo"] }

type Foo = 3;
const foo: Foo = 3;
