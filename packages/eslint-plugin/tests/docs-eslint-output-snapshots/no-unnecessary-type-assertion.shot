// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Validating rule docs no-unnecessary-type-assertion.mdx code examples ESLint output 1`] = `
"Incorrect

const foo = 3;
const bar = foo!;
            ~~~~ This assertion is unnecessary since it does not change the type of the expression.
"
`;

exports[`Validating rule docs no-unnecessary-type-assertion.mdx code examples ESLint output 2`] = `
"Incorrect

const foo = <number>(3 + 5);
            ~~~~~~~~~~~~~~~ This assertion is unnecessary since it does not change the type of the expression.
"
`;

exports[`Validating rule docs no-unnecessary-type-assertion.mdx code examples ESLint output 3`] = `
"Incorrect

type Foo = number;
const foo = <Foo>(3 + 5);
            ~~~~~~~~~~~~ This assertion is unnecessary since it does not change the type of the expression.
"
`;

exports[`Validating rule docs no-unnecessary-type-assertion.mdx code examples ESLint output 4`] = `
"Incorrect

type Foo = number;
const foo = (3 + 5) as Foo;
            ~~~~~~~~~~~~~~ This assertion is unnecessary since it does not change the type of the expression.
"
`;

exports[`Validating rule docs no-unnecessary-type-assertion.mdx code examples ESLint output 5`] = `
"Incorrect

const foo = 'foo' as const;
            ~~~~~~~~~~~~~~ This assertion is unnecessary since it does not change the type of the expression.
"
`;

exports[`Validating rule docs no-unnecessary-type-assertion.mdx code examples ESLint output 6`] = `
"Incorrect

function foo(x: number): number {
  return x!; // unnecessary non-null
         ~~ This assertion is unnecessary since it does not change the type of the expression.
}
"
`;

exports[`Validating rule docs no-unnecessary-type-assertion.mdx code examples ESLint output 7`] = `
"Correct

const foo = <number>3;
"
`;

exports[`Validating rule docs no-unnecessary-type-assertion.mdx code examples ESLint output 8`] = `
"Correct

const foo = 3 as number;
"
`;

exports[`Validating rule docs no-unnecessary-type-assertion.mdx code examples ESLint output 9`] = `
"Correct

let foo = 'foo' as const;
"
`;

exports[`Validating rule docs no-unnecessary-type-assertion.mdx code examples ESLint output 10`] = `
"Correct

function foo(x: number | undefined): number {
  return x!;
}
"
`;

exports[`Validating rule docs no-unnecessary-type-assertion.mdx code examples ESLint output 11`] = `
"Options: { "typesToIgnore": ["Foo"] }

type Foo = 3;
const foo: Foo = 3;
"
`;
