// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Validating rule docs ban-ts-comment.mdx code examples ESLint output 1`] = `
"Incorrect
Options: { "ts-ignore": true }

if (false) {
  // @ts-ignore: Unreachable code error
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Use "@ts-expect-error" instead of "@ts-ignore", as "@ts-ignore" will do nothing if the following line is error-free.
  console.log('hello');
}
if (false) {
  /* @ts-ignore: Unreachable code error */
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Use "@ts-expect-error" instead of "@ts-ignore", as "@ts-ignore" will do nothing if the following line is error-free.
  console.log('hello');
}
"
`;

exports[`Validating rule docs ban-ts-comment.mdx code examples ESLint output 2`] = `
"Correct
Options: { "ts-ignore": true }

if (false) {
  // Compiler warns about unreachable code error
  console.log('hello');
}
"
`;

exports[`Validating rule docs ban-ts-comment.mdx code examples ESLint output 3`] = `
"Incorrect
Options: { "ts-expect-error": "allow-with-description" }

if (false) {
  // @ts-expect-error
  ~~~~~~~~~~~~~~~~~~~ Include a description after the "@ts-expect-error" directive to explain why the @ts-expect-error is necessary. The description must be 3 characters or longer.
  console.log('hello');
}
if (false) {
  /* @ts-expect-error */
  ~~~~~~~~~~~~~~~~~~~~~~ Include a description after the "@ts-expect-error" directive to explain why the @ts-expect-error is necessary. The description must be 3 characters or longer.
  console.log('hello');
}
"
`;

exports[`Validating rule docs ban-ts-comment.mdx code examples ESLint output 4`] = `
"Correct
Options: { "ts-expect-error": "allow-with-description" }

if (false) {
  // @ts-expect-error: Unreachable code error
  console.log('hello');
}
if (false) {
  /* @ts-expect-error: Unreachable code error */
  console.log('hello');
}
"
`;

exports[`Validating rule docs ban-ts-comment.mdx code examples ESLint output 5`] = `
"Incorrect
Options: { "ts-expect-error": { "descriptionFormat": "^: TS\\\\d+ because .+$" } }

// @ts-expect-error: the library definition is wrong
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ The description for the "@ts-expect-error" directive must match the ^: TS\\d+ because .+$ format.
const a = doSomething('hello');
"
`;

exports[`Validating rule docs ban-ts-comment.mdx code examples ESLint output 6`] = `
"Correct
Options: { "ts-expect-error": { "descriptionFormat": "^: TS\\\\d+ because .+$" } }

// @ts-expect-error: TS1234 because the library definition is wrong
const a = doSomething('hello');
"
`;

exports[`Validating rule docs ban-ts-comment.mdx code examples ESLint output 7`] = `
"Incorrect
Options: { "ts-expect-error": "allow-with-description", "minimumDescriptionLength": 10 }

if (false) {
  // @ts-expect-error: TODO
  ~~~~~~~~~~~~~~~~~~~~~~~~~ Include a description after the "@ts-expect-error" directive to explain why the @ts-expect-error is necessary. The description must be 10 characters or longer.
  console.log('hello');
}
"
`;

exports[`Validating rule docs ban-ts-comment.mdx code examples ESLint output 8`] = `
"Correct
Options: { "ts-expect-error": "allow-with-description", "minimumDescriptionLength": 10 }

if (false) {
  // @ts-expect-error The rationale for this override is described in issue #1337 on GitLab
  console.log('hello');
}
"
`;
