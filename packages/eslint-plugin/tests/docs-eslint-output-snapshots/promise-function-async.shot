Incorrect

const arrowFunctionReturnsPromise = () => Promise.resolve('value');
                                       ~~ Functions that return promises must be async.

function functionReturnsPromise() {
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions that return promises must be async.
  return Promise.resolve('value');
}

function functionReturnsUnionWithPromiseImplicitly(p: boolean) {
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions that return promises must be async. Consider adding an explicit return type annotation if the function is intended to return a union of promise and non-promise types.
  return p ? 'value' : Promise.resolve('value');
}

Correct

const arrowFunctionReturnsPromise = async () => Promise.resolve('value');

async function functionReturnsPromise() {
  return Promise.resolve('value');
}

// An explicit return type that is not Promise means this function cannot be made async, so it is ignored by the rule
function functionReturnsUnionWithPromiseExplicitly(
  p: boolean,
): string | Promise<string> {
  return p ? 'value' : Promise.resolve('value');
}

async function functionReturnsUnionWithPromiseImplicitly(p: boolean) {
  return p ? 'value' : Promise.resolve('value');
}

Incorrect
Options: { "allowAny": false }

const returnsAny = () => ({}) as any;
                      ~~ Functions that return promises must be async.

Correct
Options: { "allowAny": false }

const returnsAny = async () => ({}) as any;

Incorrect
Options: { "allowedPromiseNames": ["Bluebird"] }

class Bluebird {}

const returnsBluebird = () => new Bluebird(() => {});
                           ~~ Functions that return promises must be async.

Correct
Options: { "allowedPromiseNames": ["Bluebird"] }

class Bluebird {}

const returnsBluebird = async () => new Bluebird(() => {});
