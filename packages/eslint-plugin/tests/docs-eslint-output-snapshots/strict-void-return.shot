Incorrect

const getNothing: () => void = () => 2137;
                                     ~~~~ Value returned in a context where a void return is expected.
const getString: () => string = () => 'Hello';
const maybeString = Math.random() > 0.1 ? getNothing() : getString();
if (maybeString) console.log(maybeString.toUpperCase()); // ❌ Crash if getNothing was called

Correct

const getNothing: () => void = () => {};
const getString: () => string = () => 'Hello';
const maybeString = Math.random() > 0.1 ? getNothing() : getString();
if (maybeString) console.log(maybeString.toUpperCase()); // ✅ No crash

Incorrect

declare function takesCallback(cb: () => void): void;

takesCallback(async () => {
                       ~~ Async function used in a context where a void function is expected.
  const response = await fetch('https://api.example.com/');
  const data = await response.json();
  console.log(data);
});

Correct

declare function takesCallback(cb: () => void): void;

takesCallback(() => {
  (async () => {
    const response = await fetch('https://api.example.com/');
    const data = await response.json();
    console.log(data);
  })().catch(console.error);
});

Incorrect

declare function takesCallback(cb: () => void): void;

takesCallback(function* () {
              ~~~~~~~~~~ Value-returning function used in a context where a void function is expected.
  console.log('Hello');
  yield;
  console.log('World');
});

Correct

declare function takesCallback(cb: () => void): void;

takesCallback(() => {
  function* gen() {
    console.log('Hello');
    yield;
    console.log('World');
  }
  for (const _ of gen());
});

Incorrect

['Kazik', 'Zenek'].forEach(name => `Hello, ${name}!`);
                                   ~~~~~~~~~~~~~~~~~ Value returned in a context where a void return is expected.

Correct

['Kazik', 'Zenek'].forEach(name => console.log(`Hello, ${name}!`));

Incorrect

declare function takesCallback(cb: () => void): void;
declare function TakesCallback(props: { cb: () => void }): string;
declare let callback: () => void;
declare let returnsCallback: () => () => void;
declare let callbackObj: Record<string, () => void>;
declare let callbackArr: (() => void)[];

takesCallback(() => 'Hello');
                    ~~~~~~~ Value returned in a context where a void return is expected.
<TakesCallback cb={() => 'Hello'} />;
                         ~~~~~~~ Value returned in a context where a void return is expected.
callback = () => 'Hello';
                 ~~~~~~~ Value returned in a context where a void return is expected.
returnsCallback = () => {
  return () => 'Hello';
               ~~~~~~~ Value returned in a context where a void return is expected.
};
callbackObj = {
  hello: () => 'Hello',
               ~~~~~~~ Value returned in a context where a void return is expected.
};
callbackArr = [() => 'Hello'];
                     ~~~~~~~ Value returned in a context where a void return is expected.

Correct

declare function takesCallback(cb: () => void): void;
declare function TakesCallback(props: { cb: () => void }): string;
declare let callback: () => void;
declare let returnsCallback: () => () => void;
declare let callbackObj: Record<string, () => void>;
declare let callbackArr: (() => void)[];

takesCallback(() => console.log('Hello'));
<TakesCallback cb={() => console.log('Hello')} />;
callback = () => console.log('Hello');
returnsCallback = () => {
  return () => console.log('Hello');
};
callbackObj = {
  hello: () => console.log('Hello'),
};
callbackArr = [() => console.log('Hello')];

Incorrect

/// <reference lib="dom" />

document.addEventListener('click', () => {
  return 'Clicked';
  ~~~~~~ Value returned in a context where a void return is expected.
});

Correct

/// <reference lib="dom" />

document.addEventListener('click', () => {
  console.log('Clicked');
});

Incorrect

class Foo {
  cb() {
    console.log('foo');
  }
}

class Bar extends Foo {
  cb() {
    super.cb();
    return 'bar';
    ~~~~~~ Value returned in a context where a void return is expected.
  }
}

Correct

class Foo {
  cb() {
    console.log('foo');
  }
}

class Bar extends Foo {
  cb() {
    super.cb();
    console.log('bar');
  }
}

Incorrect

interface Foo {
  cb(): void;
}

class Bar implements Foo {
  cb() {
    return 'cb';
    ~~~~~~ Value returned in a context where a void return is expected.
  }
}

Correct

interface Foo {
  cb(): void;
}

class Bar implements Foo {
  cb() {
    console.log('cb');
  }
}

Incorrect
Options: { "allowReturnAny": false }

declare function fn(cb: () => void): void;

fn(() => JSON.parse('{}'));
         ~~~~~~~~~~~~~~~~ Value returned in a context where a void return is expected.

fn(() => {
  return someUntypedApi();
  ~~~~~~ Value returned in a context where a void return is expected.
});

Correct
Options: { "allowReturnAny": false }

declare function fn(cb: () => void): void;

fn(() => void JSON.parse('{}'));

fn(() => {
  someUntypedApi();
});
