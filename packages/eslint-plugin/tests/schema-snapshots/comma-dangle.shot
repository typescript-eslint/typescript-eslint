// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Rule schemas should be convertible to TS types for documentation purposes comma-dangle 1`] = `
"
# SCHEMA:

{
  "$defs": {
    "value": {
      "enum": ["always", "always-multiline", "never", "only-multiline"]
    },
    "valueWithIgnore": {
      "enum": [
        "always",
        "always-multiline",
        "ignore",
        "never",
        "only-multiline"
      ]
    }
  },
  "additionalProperties": false,
  "items": [
    {
      "oneOf": [
        {
          "$ref": "#/$defs/value"
        },
        {
          "additionalProperties": false,
          "properties": {
            "arrays": {
              "$ref": "#/$defs/valueWithIgnore"
            },
            "enums": {
              "$ref": "#/$defs/valueWithIgnore"
            },
            "exports": {
              "$ref": "#/$defs/valueWithIgnore"
            },
            "functions": {
              "$ref": "#/$defs/valueWithIgnore"
            },
            "generics": {
              "$ref": "#/$defs/valueWithIgnore"
            },
            "imports": {
              "$ref": "#/$defs/valueWithIgnore"
            },
            "objects": {
              "$ref": "#/$defs/valueWithIgnore"
            },
            "tuples": {
              "$ref": "#/$defs/valueWithIgnore"
            }
          },
          "type": "object"
        }
      ]
    }
  ],
  "type": "array"
}


# TYPES:

type Value = 'always' | 'always-multiline' | 'never' | 'only-multiline';

type ValueWithIgnore =
  | 'always'
  | 'always-multiline'
  | 'ignore'
  | 'never'
  | 'only-multiline';

type Options =
  | []
  | [
      | {
          arrays?: ValueWithIgnore;
          enums?: ValueWithIgnore;
          exports?: ValueWithIgnore;
          functions?: ValueWithIgnore;
          generics?: ValueWithIgnore;
          imports?: ValueWithIgnore;
          objects?: ValueWithIgnore;
          tuples?: ValueWithIgnore;
        }
      | Value,
    ];
"
`;
