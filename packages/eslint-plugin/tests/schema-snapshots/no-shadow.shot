// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Rule schemas should be convertible to TS types for documentation purposes no-shadow 1`] = `
"
# SCHEMA:

[
  {
    "additionalProperties": false,
    "properties": {
      "allow": {
        "description": "Identifier names for which shadowing is allowed.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "builtinGlobals": {
        "description": "Whether to report shadowing of built-in global variables.",
        "type": "boolean"
      },
      "hoist": {
        "description": "Whether to report shadowing before outer functions or variables are defined.",
        "enum": ["all", "functions", "never"],
        "type": "string"
      },
      "ignoreFunctionTypeParameterNameValueShadow": {
        "description": "Whether to ignore function parameters named the same as a variable.",
        "type": "boolean"
      },
      "ignoreOnInitialization": {
        "description": "Whether to ignore the variable initializers when the shadowed variable is presumably still unitialized.",
        "type": "boolean"
      },
      "ignoreTypeValueShadow": {
        "description": "Whether to ignore types named the same as a variable.",
        "type": "boolean"
      }
    },
    "type": "object"
  }
]


# TYPES:

type Options = [
  {
    /** Identifier names for which shadowing is allowed. */
    allow?: string[];
    /** Whether to report shadowing of built-in global variables. */
    builtinGlobals?: boolean;
    /** Whether to report shadowing before outer functions or variables are defined. */
    hoist?:
      | 'functions'
      | 'never'
      /** Whether to report shadowing before outer functions or variables are defined. */
      | 'all';
    /** Whether to ignore function parameters named the same as a variable. */
    ignoreFunctionTypeParameterNameValueShadow?: boolean;
    /** Whether to ignore the variable initializers when the shadowed variable is presumably still unitialized. */
    ignoreOnInitialization?: boolean;
    /** Whether to ignore types named the same as a variable. */
    ignoreTypeValueShadow?: boolean;
  },
];
"
`;
