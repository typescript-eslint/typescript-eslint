// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Rule schemas should be convertible to TS types for documentation purposes restrict-template-expressions 1`] = `
"
# SCHEMA:

[
  {
    "additionalProperties": false,
    "properties": {
      "allow": {
        "description": "Types to allow in template expressions.",
        "items": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "additionalProperties": false,
              "properties": {
                "from": {
                  "enum": ["file"],
                  "type": "string"
                },
                "name": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "type": "array",
                      "uniqueItems": true
                    }
                  ]
                },
                "path": {
                  "type": "string"
                }
              },
              "required": ["from", "name"],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "properties": {
                "from": {
                  "enum": ["lib"],
                  "type": "string"
                },
                "name": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "type": "array",
                      "uniqueItems": true
                    }
                  ]
                }
              },
              "required": ["from", "name"],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "properties": {
                "from": {
                  "enum": ["package"],
                  "type": "string"
                },
                "name": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "type": "array",
                      "uniqueItems": true
                    }
                  ]
                },
                "package": {
                  "type": "string"
                }
              },
              "required": ["from", "name", "package"],
              "type": "object"
            }
          ]
        },
        "type": "array"
      },
      "allowAny": {
        "description": "Whether to allow \`any\` typed values in template expressions.",
        "type": "boolean"
      },
      "allowArray": {
        "description": "Whether to allow \`array\` typed values in template expressions.",
        "type": "boolean"
      },
      "allowBoolean": {
        "description": "Whether to allow \`boolean\` typed values in template expressions.",
        "type": "boolean"
      },
      "allowNever": {
        "description": "Whether to allow \`never\` typed values in template expressions.",
        "type": "boolean"
      },
      "allowNullish": {
        "description": "Whether to allow \`nullish\` typed values in template expressions.",
        "type": "boolean"
      },
      "allowNumber": {
        "description": "Whether to allow \`number\` typed values in template expressions.",
        "type": "boolean"
      },
      "allowRegExp": {
        "description": "Whether to allow \`regexp\` typed values in template expressions.",
        "type": "boolean"
      }
    },
    "type": "object"
  }
]


# TYPES:

type Options = [
  {
    /** Types to allow in template expressions. */
    allow?: (
      | {
          from: 'file';
          name: [string, ...string[]] | string;
          path?: string;
        }
      | {
          from: 'lib';
          name: [string, ...string[]] | string;
        }
      | {
          from: 'package';
          name: [string, ...string[]] | string;
          package: string;
        }
      | string
    )[];
    /** Whether to allow \`any\` typed values in template expressions. */
    allowAny?: boolean;
    /** Whether to allow \`array\` typed values in template expressions. */
    allowArray?: boolean;
    /** Whether to allow \`boolean\` typed values in template expressions. */
    allowBoolean?: boolean;
    /** Whether to allow \`never\` typed values in template expressions. */
    allowNever?: boolean;
    /** Whether to allow \`nullish\` typed values in template expressions. */
    allowNullish?: boolean;
    /** Whether to allow \`number\` typed values in template expressions. */
    allowNumber?: boolean;
    /** Whether to allow \`regexp\` typed values in template expressions. */
    allowRegExp?: boolean;
  },
];
"
`;
