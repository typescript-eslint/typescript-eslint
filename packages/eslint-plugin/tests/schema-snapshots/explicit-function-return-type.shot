// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Rule schemas should be convertible to TS types for documentation purposes explicit-function-return-type 1`] = `
"
# SCHEMA:

[
  {
    "additionalProperties": false,
    "properties": {
      "allowConciseArrowFunctionExpressionsStartingWithVoid": {
        "description": "Whether to allow arrow functions that start with the \`void\` keyword.",
        "type": "boolean"
      },
      "allowDirectConstAssertionInArrowFunctions": {
        "description": "Whether to ignore arrow functions immediately returning a \`as const\` value.",
        "type": "boolean"
      },
      "allowedNames": {
        "description": "An array of function/method names that will not have their arguments or return values checked.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "allowExpressions": {
        "description": "Whether to ignore function expressions (functions which are not part of a declaration).",
        "type": "boolean"
      },
      "allowFunctionsWithoutTypeParameters": {
        "description": "Whether to ignore functions that don't have generic type parameters.",
        "type": "boolean"
      },
      "allowHigherOrderFunctions": {
        "description": "Whether to ignore functions immediately returning another function expression.",
        "type": "boolean"
      },
      "allowIIFEs": {
        "description": "Whether to ignore immediately invoked function expressions (IIFEs).",
        "type": "boolean"
      },
      "allowTypedFunctionExpressions": {
        "description": "Whether to ignore type annotations on the variable of function expressions.",
        "type": "boolean"
      }
    },
    "type": "object"
  }
]


# TYPES:

type Options = [
  {
    /** Whether to allow arrow functions that start with the \`void\` keyword. */
    allowConciseArrowFunctionExpressionsStartingWithVoid?: boolean;
    /** Whether to ignore arrow functions immediately returning a \`as const\` value. */
    allowDirectConstAssertionInArrowFunctions?: boolean;
    /** Whether to ignore function expressions (functions which are not part of a declaration). */
    allowExpressions?: boolean;
    /** Whether to ignore functions that don't have generic type parameters. */
    allowFunctionsWithoutTypeParameters?: boolean;
    /** Whether to ignore functions immediately returning another function expression. */
    allowHigherOrderFunctions?: boolean;
    /** Whether to ignore immediately invoked function expressions (IIFEs). */
    allowIIFEs?: boolean;
    /** Whether to ignore type annotations on the variable of function expressions. */
    allowTypedFunctionExpressions?: boolean;
    /** An array of function/method names that will not have their arguments or return values checked. */
    allowedNames?: string[];
  },
];
"
`;
