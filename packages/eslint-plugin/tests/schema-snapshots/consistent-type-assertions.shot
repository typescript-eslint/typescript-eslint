// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Rule schemas should be convertible to TS types for documentation purposes consistent-type-assertions 1`] = `
"
# SCHEMA:

[
  {
    "oneOf": [
      {
        "additionalProperties": false,
        "properties": {
          "assertionStyle": {
            "description": "The expected assertion style to enforce.",
            "enum": ["never"],
            "type": "string"
          }
        },
        "required": ["assertionStyle"],
        "type": "object"
      },
      {
        "additionalProperties": false,
        "properties": {
          "assertionStyle": {
            "description": "The expected assertion style to enforce.",
            "enum": ["angle-bracket", "as"],
            "type": "string"
          },
          "objectLiteralTypeAssertions": {
            "description": "Whether to always prefer type declarations for object literals used as variable initializers, rather than type assertions.",
            "enum": ["allow", "allow-as-parameter", "never"],
            "type": "string"
          }
        },
        "required": ["assertionStyle"],
        "type": "object"
      }
    ]
  }
]


# TYPES:

type Options = [
  | {
      /** The expected assertion style to enforce. */
      assertionStyle:
        | 'as'
        /** The expected assertion style to enforce. */
        | 'angle-bracket';
      /** Whether to always prefer type declarations for object literals used as variable initializers, rather than type assertions. */
      objectLiteralTypeAssertions?:
        | 'allow-as-parameter'
        | 'never'
        /** Whether to always prefer type declarations for object literals used as variable initializers, rather than type assertions. */
        | 'allow';
    }
  | {
      /** The expected assertion style to enforce. */
      assertionStyle: /** The expected assertion style to enforce. */
      'never';
    },
];
"
`;
