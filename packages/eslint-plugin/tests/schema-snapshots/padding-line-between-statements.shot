// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Rule schemas should be convertible to TS types for documentation purposes padding-line-between-statements 1`] = `
"
# SCHEMA:

[
  {
    "$defs": {
      "paddingType": {
        "enum": ["always", "any", "never"]
      },
      "statementType": {
        "anyOf": [
          {
            "enum": [
              "*",
              "block",
              "block-like",
              "break",
              "case",
              "class",
              "const",
              "continue",
              "debugger",
              "default",
              "directive",
              "do",
              "empty",
              "export",
              "exports",
              "expression",
              "for",
              "function",
              "if",
              "iife",
              "import",
              "interface",
              "let",
              "multiline-block-like",
              "multiline-const",
              "multiline-expression",
              "multiline-let",
              "multiline-var",
              "require",
              "return",
              "singleline-const",
              "singleline-let",
              "singleline-var",
              "switch",
              "throw",
              "try",
              "type",
              "var",
              "while",
              "with"
            ]
          },
          {
            "additionalItems": false,
            "items": {
              "enum": [
                "*",
                "block",
                "block-like",
                "break",
                "case",
                "class",
                "const",
                "continue",
                "debugger",
                "default",
                "directive",
                "do",
                "empty",
                "export",
                "exports",
                "expression",
                "for",
                "function",
                "if",
                "iife",
                "import",
                "interface",
                "let",
                "multiline-block-like",
                "multiline-const",
                "multiline-expression",
                "multiline-let",
                "multiline-var",
                "require",
                "return",
                "singleline-const",
                "singleline-let",
                "singleline-var",
                "switch",
                "throw",
                "try",
                "type",
                "var",
                "while",
                "with"
              ]
            },
            "minItems": 1,
            "type": "array",
            "uniqueItems": true
          }
        ]
      }
    },
    "additionalProperties": false,
    "properties": {
      "blankLine": {
        "$ref": "#/items/0/$defs/paddingType"
      },
      "next": {
        "$ref": "#/items/0/$defs/statementType"
      },
      "prev": {
        "$ref": "#/items/0/$defs/statementType"
      }
    },
    "required": ["blankLine", "prev", "next"],
    "type": "object"
  }
]


# TYPES:

type PaddingType = 'always' | 'any' | 'never';

type StatementType =
  | (
      | '*'
      | 'block-like'
      | 'block'
      | 'break'
      | 'case'
      | 'class'
      | 'const'
      | 'continue'
      | 'debugger'
      | 'default'
      | 'directive'
      | 'do'
      | 'empty'
      | 'export'
      | 'exports'
      | 'expression'
      | 'for'
      | 'function'
      | 'if'
      | 'iife'
      | 'import'
      | 'interface'
      | 'let'
      | 'multiline-block-like'
      | 'multiline-const'
      | 'multiline-expression'
      | 'multiline-let'
      | 'multiline-var'
      | 'require'
      | 'return'
      | 'singleline-const'
      | 'singleline-let'
      | 'singleline-var'
      | 'switch'
      | 'throw'
      | 'try'
      | 'type'
      | 'var'
      | 'while'
      | 'with'
    )
  | [
      (
        | '*'
        | 'block-like'
        | 'block'
        | 'break'
        | 'case'
        | 'class'
        | 'const'
        | 'continue'
        | 'debugger'
        | 'default'
        | 'directive'
        | 'do'
        | 'empty'
        | 'export'
        | 'exports'
        | 'expression'
        | 'for'
        | 'function'
        | 'if'
        | 'iife'
        | 'import'
        | 'interface'
        | 'let'
        | 'multiline-block-like'
        | 'multiline-const'
        | 'multiline-expression'
        | 'multiline-let'
        | 'multiline-var'
        | 'require'
        | 'return'
        | 'singleline-const'
        | 'singleline-let'
        | 'singleline-var'
        | 'switch'
        | 'throw'
        | 'try'
        | 'type'
        | 'var'
        | 'while'
        | 'with'
      ),
      ...(
        | '*'
        | 'block-like'
        | 'block'
        | 'break'
        | 'case'
        | 'class'
        | 'const'
        | 'continue'
        | 'debugger'
        | 'default'
        | 'directive'
        | 'do'
        | 'empty'
        | 'export'
        | 'exports'
        | 'expression'
        | 'for'
        | 'function'
        | 'if'
        | 'iife'
        | 'import'
        | 'interface'
        | 'let'
        | 'multiline-block-like'
        | 'multiline-const'
        | 'multiline-expression'
        | 'multiline-let'
        | 'multiline-var'
        | 'require'
        | 'return'
        | 'singleline-const'
        | 'singleline-let'
        | 'singleline-var'
        | 'switch'
        | 'throw'
        | 'try'
        | 'type'
        | 'var'
        | 'while'
        | 'with'
      )[],
    ];

type Options = [
  {
    blankLine: PaddingType;
    next: StatementType;
    prev: StatementType;
  },
];
"
`;
