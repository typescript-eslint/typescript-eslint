
# SCHEMA:

[
  {
    "additionalProperties": false,
    "properties": {
      "allowConstantLoopConditions": {
        "description": "Whether to ignore constant loop conditions, such as `while (true)`.",
        "oneOf": [
          {
            "description": "Always ignore or not ignore the loop conditions",
            "type": "boolean"
          },
          {
            "description": "Which situations to ignore constant conditions in.",
            "enum": ["always", "never", "only-allowed-literals"],
            "type": "string"
          }
        ]
      },
      "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
        "description": "Whether to not error when running with a tsconfig that has strictNullChecks turned.",
        "type": "boolean"
      },
      "checkTypePredicates": {
        "description": "Whether to check the asserted argument of a type predicate function for unnecessary conditions",
        "type": "boolean"
      }
    },
    "type": "object"
  }
]


# TYPES:

type Options = [
  {
    /** Whether to ignore constant loop conditions, such as `while (true)`. */
    allowConstantLoopConditions?:
      | 'never'
      | 'only-allowed-literals'
      /**
       * Whether to ignore constant loop conditions, such as `while (true)`.
       * Always ignore or not ignore the loop conditions
       */
      | boolean
      /** Which situations to ignore constant conditions in. */
      | 'always';
    /** Whether to not error when running with a tsconfig that has strictNullChecks turned. */
    allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing?: boolean;
    /** Whether to check the asserted argument of a type predicate function for unnecessary conditions */
    checkTypePredicates?: boolean;
  },
];
