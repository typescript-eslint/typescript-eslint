// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Rule schemas should be convertible to TS types for documentation purposes prefer-nullish-coalescing 1`] = `
"
# SCHEMA:

[
  {
    "additionalProperties": false,
    "properties": {
      "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
        "description": "Unless this is set to \`true\`, the rule will error on every file whose \`tsconfig.json\` does _not_ have the \`strictNullChecks\` compiler option (or \`strict\`) set to \`true\`.",
        "type": "boolean"
      },
      "ignoreBooleanCoercion": {
        "description": "Whether to ignore arguments to the \`Boolean\` constructor",
        "type": "boolean"
      },
      "ignoreConditionalTests": {
        "description": "Whether to ignore cases that are located within a conditional test.",
        "type": "boolean"
      },
      "ignoreMixedLogicalExpressions": {
        "description": "Whether to ignore any logical or expressions that are part of a mixed logical expression (with \`&&\`).",
        "type": "boolean"
      },
      "ignorePrimitives": {
        "description": "Whether to ignore all (\`true\`) or some (an object with properties) primitive types.",
        "oneOf": [
          {
            "description": "Which primitives types may be ignored.",
            "properties": {
              "bigint": {
                "description": "Ignore bigint primitive types.",
                "type": "boolean"
              },
              "boolean": {
                "description": "Ignore boolean primitive types.",
                "type": "boolean"
              },
              "number": {
                "description": "Ignore number primitive types.",
                "type": "boolean"
              },
              "string": {
                "description": "Ignore string primitive types.",
                "type": "boolean"
              }
            },
            "type": "object"
          },
          {
            "description": "Ignore all primitive types.",
            "enum": [true],
            "type": "boolean"
          }
        ]
      },
      "ignoreTernaryTests": {
        "description": "Whether to ignore any ternary expressions that could be simplified by using the nullish coalescing operator.",
        "type": "boolean"
      }
    },
    "type": "object"
  }
]


# TYPES:

type Options = [
  {
    /** Unless this is set to \`true\`, the rule will error on every file whose \`tsconfig.json\` does _not_ have the \`strictNullChecks\` compiler option (or \`strict\`) set to \`true\`. */
    allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing?: boolean;
    /** Whether to ignore arguments to the \`Boolean\` constructor */
    ignoreBooleanCoercion?: boolean;
    /** Whether to ignore cases that are located within a conditional test. */
    ignoreConditionalTests?: boolean;
    /** Whether to ignore any logical or expressions that are part of a mixed logical expression (with \`&&\`). */
    ignoreMixedLogicalExpressions?: boolean;
    /** Whether to ignore all (\`true\`) or some (an object with properties) primitive types. */
    ignorePrimitives?: /**
     * Whether to ignore all (\`true\`) or some (an object with properties) primitive types.
     * Which primitives types may be ignored.
     */
    | {
          /** Ignore bigint primitive types. */
          bigint?: boolean;
          /** Ignore boolean primitive types. */
          boolean?: boolean;
          /** Ignore number primitive types. */
          number?: boolean;
          /** Ignore string primitive types. */
          string?: boolean;
          [k: string]: unknown;
        }
      /** Ignore all primitive types. */
      | true;
    /** Whether to ignore any ternary expressions that could be simplified by using the nullish coalescing operator. */
    ignoreTernaryTests?: boolean;
  },
];
"
`;
