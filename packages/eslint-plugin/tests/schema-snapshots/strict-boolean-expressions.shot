// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Rule schemas should be convertible to TS types for documentation purposes strict-boolean-expressions 1`] = `
"
# SCHEMA:

[
  {
    "additionalProperties": false,
    "properties": {
      "allowAny": {
        "description": "Whether to allow \`any\` in a boolean context.",
        "type": "boolean"
      },
      "allowNullableBoolean": {
        "description": "Whether to allow nullable \`boolean\`s in a boolean context.",
        "type": "boolean"
      },
      "allowNullableEnum": {
        "description": "Whether to allow nullable \`enum\`s in a boolean context.",
        "type": "boolean"
      },
      "allowNullableNumber": {
        "description": "Whether to allow nullable \`number\`s in a boolean context.",
        "type": "boolean"
      },
      "allowNullableObject": {
        "description": "Whether to allow nullable \`object\`s in a boolean context.",
        "type": "boolean"
      },
      "allowNullableString": {
        "description": "Whether to allow nullable \`string\`s in a boolean context.",
        "type": "boolean"
      },
      "allowNumber": {
        "description": "Whether to allow \`number\` in a boolean context.",
        "type": "boolean"
      },
      "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
        "type": "boolean"
      },
      "allowString": {
        "description": "Whether to allow \`string\` in a boolean context.",
        "type": "boolean"
      }
    },
    "type": "object"
  }
]


# TYPES:

type Options = [
  {
    /** Whether to allow \`any\` in a boolean context. */
    allowAny?: boolean;
    /** Whether to allow nullable \`boolean\`s in a boolean context. */
    allowNullableBoolean?: boolean;
    /** Whether to allow nullable \`enum\`s in a boolean context. */
    allowNullableEnum?: boolean;
    /** Whether to allow nullable \`number\`s in a boolean context. */
    allowNullableNumber?: boolean;
    /** Whether to allow nullable \`object\`s in a boolean context. */
    allowNullableObject?: boolean;
    /** Whether to allow nullable \`string\`s in a boolean context. */
    allowNullableString?: boolean;
    /** Whether to allow \`number\` in a boolean context. */
    allowNumber?: boolean;
    allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing?: boolean;
    /** Whether to allow \`string\` in a boolean context. */
    allowString?: boolean;
  },
];
"
`;
