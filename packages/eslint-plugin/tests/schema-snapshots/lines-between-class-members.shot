// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Rule schemas should be convertible to TS types for documentation purposes lines-between-class-members 1`] = `
"
# SCHEMA:

[
  {
    "anyOf": [
      {
        "additionalProperties": false,
        "properties": {
          "enforce": {
            "items": {
              "additionalProperties": false,
              "properties": {
                "blankLine": {
                  "enum": ["always", "never"]
                },
                "next": {
                  "enum": ["*", "field", "method"]
                },
                "prev": {
                  "enum": ["*", "field", "method"]
                }
              },
              "required": ["blankLine", "prev", "next"],
              "type": "object"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": ["enforce"],
        "type": "object"
      },
      {
        "enum": ["always", "never"]
      }
    ]
  },
  {
    "additionalProperties": false,
    "properties": {
      "exceptAfterOverload": {
        "default": true,
        "type": "boolean"
      },
      "exceptAfterSingleLine": {
        "default": false,
        "type": "boolean"
      }
    },
    "type": "object"
  }
]


# TYPES:

type Options = [
  (
    | 'always'
    | 'never'
    | {
        enforce: [
          {
            blankLine: 'always' | 'never';
            next: '*' | 'field' | 'method';
            prev: '*' | 'field' | 'method';
          },
          ...{
            blankLine: 'always' | 'never';
            next: '*' | 'field' | 'method';
            prev: '*' | 'field' | 'method';
          }[],
        ];
      }
  ),
  {
    exceptAfterOverload?: boolean;
    exceptAfterSingleLine?: boolean;
  },
];
"
`;
