// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Rule schemas should be convertible to TS types for documentation purposes no-unused-vars 1`] = `
"
# SCHEMA:

[
  {
    "oneOf": [
      {
        "enum": ["all", "local"],
        "type": "string"
      },
      {
        "additionalProperties": false,
        "properties": {
          "args": {
            "description": "Whether to check all, some, or no arguments.",
            "enum": ["after-used", "all", "none"],
            "type": "string"
          },
          "argsIgnorePattern": {
            "description": "Regular expressions of argument names to not check for usage.",
            "type": "string"
          },
          "caughtErrors": {
            "description": "Whether to check catch block arguments.",
            "enum": ["all", "none"],
            "type": "string"
          },
          "caughtErrorsIgnorePattern": {
            "description": "Regular expressions of catch block argument names to not check for usage.",
            "type": "string"
          },
          "destructuredArrayIgnorePattern": {
            "description": "Regular expressions of destructured array variable names to not check for usage.",
            "type": "string"
          },
          "ignoreClassWithStaticInitBlock": {
            "description": "Whether to ignore classes with at least one static initialization block.",
            "type": "boolean"
          },
          "ignoreRestSiblings": {
            "description": "Whether to ignore sibling properties in \`...\` destructurings.",
            "type": "boolean"
          },
          "reportUsedIgnorePattern": {
            "description": "Whether to report variables that match any of the valid ignore pattern options if they have been used.",
            "type": "boolean"
          },
          "vars": {
            "description": "Whether to check all variables or only locally-declared variables.",
            "enum": ["all", "local"],
            "type": "string"
          },
          "varsIgnorePattern": {
            "description": "Regular expressions of variable names to not check for usage.",
            "type": "string"
          }
        },
        "type": "object"
      }
    ]
  }
]


# TYPES:

type Options = [
  | 'all'
  | 'local'
  | {
      /** Whether to check all, some, or no arguments. */
      args?:
        | 'all'
        | 'none'
        /** Whether to check all, some, or no arguments. */
        | 'after-used';
      /** Regular expressions of argument names to not check for usage. */
      argsIgnorePattern?: string;
      /** Whether to check catch block arguments. */
      caughtErrors?:
        | 'none'
        /** Whether to check catch block arguments. */
        | 'all';
      /** Regular expressions of catch block argument names to not check for usage. */
      caughtErrorsIgnorePattern?: string;
      /** Regular expressions of destructured array variable names to not check for usage. */
      destructuredArrayIgnorePattern?: string;
      /** Whether to ignore classes with at least one static initialization block. */
      ignoreClassWithStaticInitBlock?: boolean;
      /** Whether to ignore sibling properties in \`...\` destructurings. */
      ignoreRestSiblings?: boolean;
      /** Whether to report variables that match any of the valid ignore pattern options if they have been used. */
      reportUsedIgnorePattern?: boolean;
      /** Whether to check all variables or only locally-declared variables. */
      vars?:
        | 'local'
        /** Whether to check all variables or only locally-declared variables. */
        | 'all';
      /** Regular expressions of variable names to not check for usage. */
      varsIgnorePattern?: string;
    },
];
"
`;
