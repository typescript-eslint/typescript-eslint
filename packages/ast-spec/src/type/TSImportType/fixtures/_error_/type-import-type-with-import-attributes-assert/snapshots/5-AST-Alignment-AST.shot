// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`AST Fixtures > type > TSImportType > type-import-type-with-import-attributes-assert > AST Alignment - AST`]
Snapshot Diff:
- TSESTree
+ Babel

  Program {
    type: 'Program',
    body: Array [
      TSTypeAliasDeclaration {
        type: 'TSTypeAliasDeclaration',
-       declare: false,
        id: Identifier {
          type: 'Identifier',
-         decorators: Array [],
          name: 'A',
-         optional: false,

          range: [5, 6],
          loc: {
            start: { column: 5, line: 1 },
            end: { column: 6, line: 1 },
          },
        },
        typeAnnotation: TSImportType {
          type: 'TSImportType',
-         argument: TSLiteralType {
-           type: 'TSLiteralType',
-           literal: Literal {
-             type: 'Literal',
-             raw: '"A"',
-             value: 'A',
-
-             range: [16, 19],
-             loc: {
-               start: { column: 16, line: 1 },
-               end: { column: 19, line: 1 },
-             },
-           },
+         argument: Literal {
+           type: 'Literal',
+           raw: '"A"',
+           value: 'A',

            range: [16, 19],
            loc: {
              start: { column: 16, line: 1 },
              end: { column: 19, line: 1 },
            },
          },
          options: ObjectExpression {
            type: 'ObjectExpression',
            properties: Array [
              Property {
                type: 'Property',
                computed: false,
                key: Identifier {
                  type: 'Identifier',
-                 decorators: Array [],
                  name: 'assert',
-                 optional: false,

                  range: [23, 29],
                  loc: {
                    start: { column: 23, line: 1 },
                    end: { column: 29, line: 1 },
                  },
                },
                kind: 'init',
                method: false,
-               optional: false,
                shorthand: false,
                value: ObjectExpression {
                  type: 'ObjectExpression',
                  properties: Array [
                    Property {
                      type: 'Property',
                      computed: false,
                      key: Identifier {
                        type: 'Identifier',
-                       decorators: Array [],
                        name: 'type',
-                       optional: false,

                        range: [33, 37],
                        loc: {
                          start: { column: 33, line: 1 },
                          end: { column: 37, line: 1 },
                        },
                      },
                      kind: 'init',
                      method: false,
-                     optional: false,
                      shorthand: false,
                      value: Literal {
                        type: 'Literal',
                        raw: '"json"',
                        value: 'json',

                        range: [39, 45],
                        loc: {
                          start: { column: 39, line: 1 },
                          end: { column: 45, line: 1 },
                        },
                      },

                      range: [33, 45],
                      loc: {
                        start: { column: 33, line: 1 },
                        end: { column: 45, line: 1 },
                      },
                    },
                  ],

                  range: [31, 47],
                  loc: {
                    start: { column: 31, line: 1 },
                    end: { column: 47, line: 1 },
                  },
                },

                range: [23, 47],
                loc: {
                  start: { column: 23, line: 1 },
                  end: { column: 47, line: 1 },
                },
              },
            ],

            range: [21, 49],
            loc: {
              start: { column: 21, line: 1 },
              end: { column: 49, line: 1 },
            },
          },
-         qualifier: null,
-         typeArguments: null,

          range: [9, 50],
          loc: {
            start: { column: 9, line: 1 },
            end: { column: 50, line: 1 },
          },
        },

        range: [0, 51],
        loc: {
          start: { column: 0, line: 1 },
          end: { column: 51, line: 1 },
        },
      },
    ],
    sourceType: 'script',

    range: [0, 52],
    loc: {
      start: { column: 0, line: 1 },
      end: { column: 0, line: 2 },
    },
  }
