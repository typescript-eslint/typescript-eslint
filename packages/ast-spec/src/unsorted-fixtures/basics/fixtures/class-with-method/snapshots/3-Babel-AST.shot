// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AST Fixtures unsorted-fixtures basics class-with-method Babel - AST 1`] = `
Program {
  type: "Program",
  body: Array [
    ClassDeclaration {
      type: "ClassDeclaration",
      body: ClassBody {
        type: "ClassBody",
        body: Array [
          MethodDefinition {
            type: "MethodDefinition",
            computed: false,
            key: Identifier {
              type: "Identifier",
              name: "foo",

              range: [85, 88],
              loc: {
                start: { column: 2, line: 4 },
                end: { column: 5, line: 4 },
              },
            },
            kind: "method",
            static: false,
            value: FunctionExpression {
              type: "FunctionExpression",
              async: false,
              body: BlockStatement {
                type: "BlockStatement",
                body: Array [],

                range: [99, 102],
                loc: {
                  start: { column: 16, line: 4 },
                  end: { column: 19, line: 4 },
                },
              },
              expression: false,
              generator: false,
              id: null,
              params: Array [],
              returnType: TSTypeAnnotation {
                type: "TSTypeAnnotation",
                typeAnnotation: TSNumberKeyword {
                  type: "TSNumberKeyword",

                  range: [92, 98],
                  loc: {
                    start: { column: 9, line: 4 },
                    end: { column: 15, line: 4 },
                  },
                },

                range: [90, 98],
                loc: {
                  start: { column: 7, line: 4 },
                  end: { column: 15, line: 4 },
                },
              },

              range: [88, 102],
              loc: {
                start: { column: 5, line: 4 },
                end: { column: 19, line: 4 },
              },
            },

            range: [85, 102],
            loc: {
              start: { column: 2, line: 4 },
              end: { column: 19, line: 4 },
            },
          },
          MethodDefinition {
            type: "MethodDefinition",
            computed: false,
            key: Identifier {
              type: "Identifier",
              name: "bar",

              range: [105, 108],
              loc: {
                start: { column: 2, line: 5 },
                end: { column: 5, line: 5 },
              },
            },
            kind: "method",
            static: false,
            value: FunctionExpression {
              type: "FunctionExpression",
              async: false,
              body: BlockStatement {
                type: "BlockStatement",
                body: Array [],

                range: [114, 117],
                loc: {
                  start: { column: 11, line: 5 },
                  end: { column: 14, line: 5 },
                },
              },
              expression: false,
              generator: false,
              id: null,
              params: Array [],
              typeParameters: TSTypeParameterDeclaration {
                type: "TSTypeParameterDeclaration",
                params: Array [
                  TSTypeParameter {
                    type: "TSTypeParameter",
                    name: "T",

                    range: [109, 110],
                    loc: {
                      start: { column: 6, line: 5 },
                      end: { column: 7, line: 5 },
                    },
                  },
                ],

                range: [108, 111],
                loc: {
                  start: { column: 5, line: 5 },
                  end: { column: 8, line: 5 },
                },
              },

              range: [111, 117],
              loc: {
                start: { column: 8, line: 5 },
                end: { column: 14, line: 5 },
              },
            },

            range: [105, 117],
            loc: {
              start: { column: 2, line: 5 },
              end: { column: 14, line: 5 },
            },
          },
          MethodDefinition {
            type: "MethodDefinition",
            computed: false,
            key: Identifier {
              type: "Identifier",
              name: "baz",

              range: [120, 123],
              loc: {
                start: { column: 2, line: 6 },
                end: { column: 5, line: 6 },
              },
            },
            kind: "method",
            static: false,
            value: FunctionExpression {
              type: "FunctionExpression",
              async: false,
              body: BlockStatement {
                type: "BlockStatement",
                body: Array [],

                range: [126, 128],
                loc: {
                  start: { column: 8, line: 6 },
                  end: { column: 10, line: 6 },
                },
              },
              expression: false,
              generator: false,
              id: null,
              params: Array [],

              range: [123, 128],
              loc: {
                start: { column: 5, line: 6 },
                end: { column: 10, line: 6 },
              },
            },

            range: [120, 128],
            loc: {
              start: { column: 2, line: 6 },
              end: { column: 10, line: 6 },
            },
          },
        ],

        range: [81, 130],
        loc: {
          start: { column: 8, line: 3 },
          end: { column: 1, line: 7 },
        },
      },
      id: Identifier {
        type: "Identifier",
        name: "C",

        range: [79, 80],
        loc: {
          start: { column: 6, line: 3 },
          end: { column: 7, line: 3 },
        },
      },
      superClass: null,

      range: [73, 130],
      loc: {
        start: { column: 0, line: 3 },
        end: { column: 1, line: 7 },
      },
    },
  ],
  sourceType: "script",

  range: [73, 131],
  loc: {
    start: { column: 0, line: 3 },
    end: { column: 0, line: 8 },
  },
}
`;
