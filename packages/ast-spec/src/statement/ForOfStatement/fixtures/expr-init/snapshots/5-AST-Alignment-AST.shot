// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AST Fixtures statement ForOfStatement expr-init AST Alignment - AST 1`] = `
"Snapshot Diff:
- TSESTree
+ Babel

  Program {
    type: 'Program',
    body: Array [
      ForOfStatement {
        type: 'ForOfStatement',
        await: false,
        body: BlockStatement {
          type: 'BlockStatement',
          body: Array [],

          range: [21, 24],
          loc: {
            start: { column: 21, line: 1 },
            end: { column: 1, line: 2 },
          },
        },
        left: ObjectPattern {
          type: 'ObjectPattern',
-         decorators: Array [],
-         optional: false,
          properties: Array [
            Property {
              type: 'Property',
              computed: false,
              key: Identifier {
                type: 'Identifier',
-               decorators: Array [],
                name: 'x',
-               optional: false,

                range: [7, 8],
                loc: {
                  start: { column: 7, line: 1 },
                  end: { column: 8, line: 1 },
                },
              },
              kind: 'init',
              method: false,
-             optional: false,
              shorthand: true,
              value: Identifier {
                type: 'Identifier',
-               decorators: Array [],
                name: 'x',
-               optional: false,

                range: [7, 8],
                loc: {
                  start: { column: 7, line: 1 },
                  end: { column: 8, line: 1 },
                },
              },

              range: [7, 8],
              loc: {
                start: { column: 7, line: 1 },
                end: { column: 8, line: 1 },
              },
            },
            Property {
              type: 'Property',
              computed: false,
              key: Identifier {
                type: 'Identifier',
-               decorators: Array [],
                name: 'y',
-               optional: false,

                range: [10, 11],
                loc: {
                  start: { column: 10, line: 1 },
                  end: { column: 11, line: 1 },
                },
              },
              kind: 'init',
              method: false,
-             optional: false,
              shorthand: true,
              value: Identifier {
                type: 'Identifier',
-               decorators: Array [],
                name: 'y',
-               optional: false,

                range: [10, 11],
                loc: {
                  start: { column: 10, line: 1 },
                  end: { column: 11, line: 1 },
                },
              },

              range: [10, 11],
              loc: {
                start: { column: 10, line: 1 },
                end: { column: 11, line: 1 },
              },
            },
          ],

          range: [5, 13],
          loc: {
            start: { column: 5, line: 1 },
            end: { column: 13, line: 1 },
          },
        },
        right: ArrayExpression {
          type: 'ArrayExpression',
          elements: Array [],

          range: [17, 19],
          loc: {
            start: { column: 17, line: 1 },
            end: { column: 19, line: 1 },
          },
        },

        range: [0, 24],
        loc: {
          start: { column: 0, line: 1 },
          end: { column: 1, line: 2 },
        },
      },
      ForOfStatement {
        type: 'ForOfStatement',
        await: false,
        body: BlockStatement {
          type: 'BlockStatement',
          body: Array [],

          range: [44, 47],
          loc: {
            start: { column: 19, line: 3 },
            end: { column: 1, line: 4 },
          },
        },
        left: ArrayPattern {
          type: 'ArrayPattern',
-         decorators: Array [],
          elements: Array [
            Identifier {
              type: 'Identifier',
-             decorators: Array [],
              name: 'x',
-             optional: false,

              range: [31, 32],
              loc: {
                start: { column: 6, line: 3 },
                end: { column: 7, line: 3 },
              },
            },
            Identifier {
              type: 'Identifier',
-             decorators: Array [],
              name: 'y',
-             optional: false,

              range: [34, 35],
              loc: {
                start: { column: 9, line: 3 },
                end: { column: 10, line: 3 },
              },
            },
          ],
-         optional: false,

          range: [30, 36],
          loc: {
            start: { column: 5, line: 3 },
            end: { column: 11, line: 3 },
          },
        },
        right: ArrayExpression {
          type: 'ArrayExpression',
          elements: Array [],

          range: [40, 42],
          loc: {
            start: { column: 15, line: 3 },
            end: { column: 17, line: 3 },
          },
        },

        range: [25, 47],
        loc: {
          start: { column: 0, line: 3 },
          end: { column: 1, line: 4 },
        },
      },
      ForOfStatement {
        type: 'ForOfStatement',
        await: false,
        body: BlockStatement {
          type: 'BlockStatement',
          body: Array [],

          range: [64, 67],
          loc: {
            start: { column: 16, line: 5 },
            end: { column: 1, line: 6 },
          },
        },
        left: MemberExpression {
          type: 'MemberExpression',
          computed: false,
          object: Identifier {
            type: 'Identifier',
-           decorators: Array [],
            name: 'x',
-           optional: false,

            range: [53, 54],
            loc: {
              start: { column: 5, line: 5 },
              end: { column: 6, line: 5 },
            },
          },
          optional: false,
          property: Identifier {
            type: 'Identifier',
-           decorators: Array [],
            name: 'y',
-           optional: false,

            range: [55, 56],
            loc: {
              start: { column: 7, line: 5 },
              end: { column: 8, line: 5 },
            },
          },

          range: [53, 56],
          loc: {
            start: { column: 5, line: 5 },
            end: { column: 8, line: 5 },
          },
        },
        right: ArrayExpression {
          type: 'ArrayExpression',
          elements: Array [],

          range: [60, 62],
          loc: {
            start: { column: 12, line: 5 },
            end: { column: 14, line: 5 },
          },
        },

        range: [48, 67],
        loc: {
          start: { column: 0, line: 5 },
          end: { column: 1, line: 6 },
        },
      },
      ForOfStatement {
        type: 'ForOfStatement',
        await: false,
        body: BlockStatement {
          type: 'BlockStatement',
          body: Array [],

          range: [87, 90],
          loc: {
            start: { column: 19, line: 7 },
            end: { column: 1, line: 8 },
          },
        },
        left: TSAsExpression {
          type: 'TSAsExpression',
          expression: Identifier {
            type: 'Identifier',
-           decorators: Array [],
            name: 'x',
-           optional: false,

            range: [73, 74],
            loc: {
              start: { column: 5, line: 7 },
              end: { column: 6, line: 7 },
            },
          },
          typeAnnotation: TSTypeReference {
            type: 'TSTypeReference',
            typeName: Identifier {
              type: 'Identifier',
-             decorators: Array [],
              name: 'T',
-             optional: false,

              range: [78, 79],
              loc: {
                start: { column: 10, line: 7 },
                end: { column: 11, line: 7 },
              },
            },

            range: [78, 79],
            loc: {
              start: { column: 10, line: 7 },
              end: { column: 11, line: 7 },
            },
          },

          range: [73, 79],
          loc: {
            start: { column: 5, line: 7 },
            end: { column: 11, line: 7 },
          },
        },
        right: ArrayExpression {
          type: 'ArrayExpression',
          elements: Array [],

          range: [83, 85],
          loc: {
            start: { column: 15, line: 7 },
            end: { column: 17, line: 7 },
          },
        },

        range: [68, 90],
        loc: {
          start: { column: 0, line: 7 },
          end: { column: 1, line: 8 },
        },
      },
    ],
    sourceType: 'script',

    range: [0, 91],
    loc: {
      start: { column: 0, line: 1 },
      end: { column: 0, line: 9 },
    },
  }"
`;
