// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AST Fixtures legacy-fixtures basics type-assertion-in-method AST Alignment - AST 1`] = `
"Snapshot Diff:
- TSESTree
+ Babel

  Program {
    type: 'Program',
    body: Array [
      ClassDeclaration {
        type: 'ClassDeclaration',
        body: ClassBody {
          type: 'ClassBody',
          body: Array [
            MethodDefinition {
              type: 'MethodDefinition',
              computed: false,
              key: Identifier {
                type: 'Identifier',
                name: 'isBar',

                range: [94, 99],
                loc: {
                  start: { column: 2, line: 4 },
                  end: { column: 7, line: 4 },
                },
              },
              kind: 'method',
-             override: false,
              static: false,
              value: FunctionExpression {
                type: 'FunctionExpression',
                async: false,
                body: BlockStatement {
                  type: 'BlockStatement',
                  body: Array [
                    ReturnStatement {
                      type: 'ReturnStatement',
                      argument: null,

                      range: [122, 129],
                      loc: {
                        start: { column: 4, line: 5 },
                        end: { column: 11, line: 5 },
                      },
                    },
                  ],

                  range: [116, 133],
                  loc: {
                    start: { column: 24, line: 4 },
                    end: { column: 3, line: 6 },
                  },
                },
                expression: false,
                generator: false,
                id: null,
                params: Array [],
                returnType: TSTypeAnnotation {
                  type: 'TSTypeAnnotation',
                  typeAnnotation: TSTypePredicate {
                    type: 'TSTypePredicate',
                    asserts: true,
                    parameterName: TSThisType {
                      type: 'TSThisType',

                      range: [111, 115],
                      loc: {
                        start: { column: 19, line: 4 },
                        end: { column: 23, line: 4 },
                      },
                    },
                    typeAnnotation: null,

                    range: [103, 115],
                    loc: {
                      start: { column: 11, line: 4 },
                      end: { column: 23, line: 4 },
                    },
                  },

                  range: [101, 115],
                  loc: {
                    start: { column: 9, line: 4 },
                    end: { column: 23, line: 4 },
                  },
                },

                range: [99, 133],
                loc: {
                  start: { column: 7, line: 4 },
                  end: { column: 3, line: 6 },
                },
              },

              range: [94, 133],
              loc: {
                start: { column: 2, line: 4 },
                end: { column: 3, line: 6 },
              },
            },
            PropertyDefinition {
              type: 'PropertyDefinition',
              computed: false,
-             declare: false,
              key: Identifier {
                type: 'Identifier',
                name: 'isBaz',

                range: [136, 141],
                loc: {
                  start: { column: 2, line: 7 },
                  end: { column: 7, line: 7 },
                },
              },
-             override: false,
              static: false,
              value: ArrowFunctionExpression {
                type: 'ArrowFunctionExpression',
                async: false,
                body: BlockStatement {
                  type: 'BlockStatement',
                  body: Array [
                    ReturnStatement {
                      type: 'ReturnStatement',
                      argument: null,

                      range: [170, 177],
                      loc: {
                        start: { column: 4, line: 8 },
                        end: { column: 11, line: 8 },
                      },
                    },
                  ],

                  range: [164, 181],
                  loc: {
                    start: { column: 30, line: 7 },
                    end: { column: 3, line: 9 },
                  },
                },
                expression: false,
                generator: false,
                id: null,
                params: Array [],
                returnType: TSTypeAnnotation {
                  type: 'TSTypeAnnotation',
                  typeAnnotation: TSTypePredicate {
                    type: 'TSTypePredicate',
                    asserts: true,
                    parameterName: TSThisType {
                      type: 'TSThisType',

                      range: [156, 160],
                      loc: {
                        start: { column: 22, line: 7 },
                        end: { column: 26, line: 7 },
                      },
                    },
                    typeAnnotation: null,

                    range: [148, 160],
                    loc: {
                      start: { column: 14, line: 7 },
                      end: { column: 26, line: 7 },
                    },
                  },

                  range: [146, 160],
                  loc: {
                    start: { column: 12, line: 7 },
                    end: { column: 26, line: 7 },
                  },
                },

                range: [144, 181],
                loc: {
                  start: { column: 10, line: 7 },
                  end: { column: 3, line: 9 },
                },
              },

              range: [136, 182],
              loc: {
                start: { column: 2, line: 7 },
                end: { column: 4, line: 9 },
              },
            },
          ],

          range: [90, 184],
          loc: {
            start: { column: 17, line: 3 },
            end: { column: 1, line: 10 },
          },
        },
        id: Identifier {
          type: 'Identifier',
          name: 'AssertsFoo',

          range: [79, 89],
          loc: {
            start: { column: 6, line: 3 },
            end: { column: 16, line: 3 },
          },
        },
        superClass: null,

        range: [73, 184],
        loc: {
          start: { column: 0, line: 3 },
          end: { column: 1, line: 10 },
        },
      },
    ],
    sourceType: 'script',

    range: [73, 185],
    loc: {
      start: { column: 0, line: 3 },
      end: { column: 0, line: 11 },
    },
  }"
`;
