name: CI

on:
  push:
    branches:
      - master
      # TODO - delete this before merging v4 into master
      - v4
  pull_request:
    branches:
      - '**'

env:
  PRIMARY_NODE_VERSION: 12

jobs:
  typecheck:
    name: Typecheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: echo github.ref
        run: echo ${{ github.ref }}

      - name: Use Node.js ${{ env.PRIMARY_NODE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.PRIMARY_NODE_VERSION }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: |
          yarn --ignore-engines --frozen-lockfile --ignore-scripts
          yarn lerna:init
          yarn check:clean-workspace-after-install

      - name: Build
        run: |
          yarn build

      # Note that this command *also* type checks tests/tools,
      # whereas the build only checks src files
      - name: Typecheck all packages
        run: yarn typecheck

  test_on_primary_node_version:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: echo github.ref
        run: echo ${{ github.ref }}

      - name: Use Node.js ${{ env.PRIMARY_NODE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.PRIMARY_NODE_VERSION }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: |
          yarn --ignore-engines --frozen-lockfile --ignore-scripts
          yarn lerna:init
          yarn check:clean-workspace-after-install

      - name: Build
        run: |
          yarn build

      - name: Run unit tests for typescript-estree
        run: yarn test
        working-directory: packages/typescript-estree
        env:
          CI: true

      - name: Run unit tests for visitor-keys
        run: yarn test
        working-directory: packages/visitor-keys
        env:
          CI: true

      - name: Run unit tests for scope-manager
        run: yarn test
        working-directory: packages/scope-manager
        env:
          CI: true

      - name: Run unit tests for experimental-utils
        run: yarn test
        working-directory: packages/experimental-utils
        env:
          CI: true

      - name: Run unit tests for parser
        run: yarn test
        working-directory: packages/parser
        env:
          CI: true

      - name: Run unit tests for eslint-plugin
        run: yarn test
        working-directory: packages/eslint-plugin
        env:
          CI: true

      - name: Run unit tests for eslint-plugin-tslint
        run: yarn test
        working-directory: packages/eslint-plugin-tslint
        env:
          CI: true

      - name: Run unit tests for eslint-plugin-internal
        run: yarn test
        working-directory: packages/eslint-plugin-internal
        env:
          CI: true

      - name: Publish code coverage report
        uses: codecov/codecov-action@v1
        with:
          yml: ./codecov.yml
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittest
          name: codecov

  linting_and_style:
    name: Code style and lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ env.PRIMARY_NODE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.PRIMARY_NODE_VERSION }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: |
          yarn --ignore-engines --frozen-lockfile --ignore-scripts
          yarn lerna:init
          yarn check:clean-workspace-after-install

      - name: Build
        run: |
          yarn build

      - name: Check code formatting
        run: yarn check:format

      - name: Lint code
        run: yarn lint

      - name: Lint markdown
        run: yarn lint:markdown

      - name: Check spelling
        run: yarn check:spelling

  integration_tests:
    name: Run integration tests on primary Node.js version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ env.PRIMARY_NODE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.PRIMARY_NODE_VERSION }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: |
          yarn --ignore-engines --frozen-lockfile --ignore-scripts
          yarn lerna:init
          yarn check:clean-workspace-after-install

      - name: Build
        run: |
          yarn build

      - name: Run integrations tests
        run: yarn test:integration
        env:
          CI: true

  unit_tests_on_other_node_versions:
    name: Run unit tests on other Node.js versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [10.x, 14.x]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: |
          yarn --ignore-engines --frozen-lockfile --ignore-scripts
          yarn lerna:init
          yarn check:clean-workspace-after-install

      - name: Build
        run: |
          yarn build

      - name: Run unit tests for typescript-estree
        run: yarn test
        working-directory: packages/typescript-estree
        env:
          CI: true

      - name: Run unit tests for visitor-keys
        run: yarn test
        working-directory: packages/visitor-keys
        env:
          CI: true

      - name: Run unit tests for scope-manager
        run: yarn test
        working-directory: packages/scope-manager
        env:
          CI: true

      - name: Run unit tests for experimental-utils
        run: yarn test
        working-directory: packages/experimental-utils
        env:
          CI: true

      - name: Run unit tests for parser
        run: yarn test
        working-directory: packages/parser
        env:
          CI: true

      - name: Run unit tests for eslint-plugin
        run: yarn test
        working-directory: packages/eslint-plugin
        env:
          CI: true

      - name: Run unit tests for eslint-plugin-tslint
        run: yarn test
        working-directory: packages/eslint-plugin-tslint
        env:
          CI: true

      # eslint-plugin-internal is internal only - so don't care about compat on other versions

  publish_canary_version:
    name: Publish the latest code as a canary version
    runs-on: ubuntu-latest
    needs: [typecheck, test_on_primary_node_version, unit_tests_on_other_node_versions, linting_and_style, integration_tests]
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2
      # Fetch all history for all tags and branches in this job because lerna needs it
      - run: |
          git fetch --prune --unshallow

      - name: Use Node.js ${{ env.PRIMARY_NODE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.PRIMARY_NODE_VERSION }}
          registry-url: https://registry.npmjs.org/

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: |
          yarn --ignore-engines --frozen-lockfile --ignore-scripts
          yarn lerna:init
          yarn check:clean-workspace-after-install

      - name: Build
        run: |
          yarn build

      - name: Publish all packages to npm
        run: npx lerna publish --loglevel=verbose --canary --exact --force-publish --yes
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # TODO - delete this before merging v4 into master
  publish_v4_prerelease_version:
    name: Publish the latest code as a v4 prerelease version
    runs-on: ubuntu-latest
    needs: [typecheck, test_on_primary_node_version, unit_tests_on_other_node_versions, linting_and_style, integration_tests]
    if: github.ref == 'refs/heads/v4'
    steps:
      - uses: actions/checkout@v2
      # Fetch all history for all tags and branches in this job because lerna needs it
      - run: |
          git fetch --prune --unshallow

      - name: Use Node.js ${{ env.PRIMARY_NODE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.PRIMARY_NODE_VERSION }}
          registry-url: https://registry.npmjs.org/

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: |
          yarn --ignore-engines --frozen-lockfile --ignore-scripts
          yarn lerna:init
          yarn check:clean-workspace-after-install

      - name: Build
        run: |
          yarn build

      - name: Publish all packages to npm
        run: npx lerna publish premajor --loglevel=verbose --canary --exact --force-publish --yes --dist-tag rc-v4
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
